<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Protocols.TestTools</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Protocols.TestTools.DefaultValueAttribute">
            <summary>
            Provides a default return value attribute used by adapter methods.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultValueAttribute.#ctor">
            <summary>
            Disables the default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultValueAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with specified default value.
            </summary>
            <param name="defaultValue">The default value string.</param>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.DefaultValueAttribute.DefaultValue">
            <summary>
            Gets the content of the helper message.
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.InteractiveAdapterDialog">
            <summary>
            Interactive adapter dialog.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.InteractiveAdapterDialog.#ctor(System.Runtime.Remoting.Messaging.IMethodCallMessage,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates a new instance of InteractiveAdapterDialog class.
            </summary>
            <param name="methodCall">An IMessage that contains a IDictionary of information about the method call.</param>
            <param name="ptfProp">A NameValueCollection of settings from the test configuration file.</param>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.InteractiveAdapterDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.InteractiveAdapterDialog.Dispose(System.Boolean)">
            <summary>
            Cleans up any resources being used.
            </summary>
            <param name="disposing">True if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.InteractiveAdapterDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.InteractiveAdapterDialog.OutArgs">
            <summary>
            The objects array returned from the UI as out parameters. 
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.InteractiveAdapterDialog.ReturnValue">
            <summary>
            The object returned by UI as return value.
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.AdapterProxyBase">
            <summary>
            Only for internal use. An abstract base class for adapter implementations based on transparent
            proxies. Implements adapter standard methods.
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.AdapterProxyBase.proxyType">
            <summary>
            Adapter interface type.
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.AdapterProxyBase.TestSite">
            <summary>
            The test site which is defined after initialization has been performed.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.AdapterProxyBase.#ctor(System.Type)">
            <summary>
            Constructs a new instance of AdapterProxyBase.
            </summary>
            <param name="typeToProxy">The Type of the remote object for which to create a proxy.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.AdapterProxyBase.Invoke(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            Implements Invoke method of RealProxy. Delegates standard adapter methods to the equivalent proxy methods,
            and delegates all other invocations to abstract invoke method.        
            </summary>
            <param name="msg">An IMessage that contains a IDictionary of information about the method call. </param>
            <returns>The message returned by the delegated method, containing the return value and any out or ref parameter.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.AdapterProxyBase.Invoke(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            To be implemented by derived classes to realize invocation of methods
            which are not from the IAdapter interface.
            </summary>
            <param name="methodCall">An IMessage that contains a IDictionary of information about the method call.</param>
            <returns>The message returned by the Invoke implementation.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.AdapterProxyBase.Initialize(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            Initializes the instance of AdapterProxyBase.
            Can be overridden by derived classes to do special initialization code, and derived classes should
            call base to ensure the test site is initialized.
            </summary>
            <remarks>
            This method will be called automatically by <see cref="M:Microsoft.Protocols.TestTools.ITestSite.GetAdapter(System.Type)"/>. User needs not call it directly.
            </remarks>
            <param name="methodCall">An IMessage that contains a IDictionary of information about the method call.</param>
            <returns>The message returned by the Initialize implementation.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.AdapterProxyBase.GetSite(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            Can be overridden by derived classes to do special processing of TestSite getter.
            </summary>
            <param name="methodCall">An IMessage that contains a IDictionary of information about the method call.</param>
            <returns>The message returned by the GetSite implementation.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.AdapterProxyBase.Reset(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            Can be overridden by derived classes to do special processing of Reset.
            </summary>
            <param name="methodCall">An IMessage that contains a IDictionary of information about the method call.</param>
            <returns>The message returned by the Reset implementation.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.AdapterProxyBase.Dispose(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            Can be overridden by derived classes to do special processing of Dispose.
            </summary>
            <param name="methodCall">An IMessage that contains a IDictionary of information about the method call.</param>
            <returns>The message returned by the Dispose implementation.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.AdapterProxyBase.GetHashCode(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            Can be overridden by derived classes to do special processing of GetHashCode.
            </summary>
            <param name="methodCall">An IMessage that contains a IDictionary of information about the method call.</param>
            <returns>The message returned by the Dispose implementation.</returns>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.AdapterProxyBase.ProxyType">
            <summary>
            Gets the adapter interface type.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PsWrapperAdapterProxy.Reset(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            Can be overridden by extenders to do special processing of Reset.
            </summary>
            <param name="mcall"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PsWrapperAdapterProxy.InvokeCompact(System.Runtime.Remoting.Messaging.IMethodCallMessage,System.String)">
            <summary>
            Proxy method for substitution of executing Initialize/Reset methods in adapter interface.
            </summary>
            <param name="mcall">The IMethodCallMessage containing method invoking data.</param>
            <param name="helpMessage">The help message from the attribute</param>
            <returns>Always void.</returns>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.PsWrapperParameterBuilder">
            <summary>
            A class store parameter information of the invoked adapter method.
            This class is only for PowerShell adapter internal use.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PsWrapperParameterBuilder.#ctor(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            Constructor of the PowerShell parameter builder class.
            </summary>
            <param name="methodCall">Method call message</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PsWrapperParameterBuilder.SetAllParametersAsVariables(System.Reflection.MethodInfo,System.Object)">
            <summary>
            Sets all parameters/properties as variables.
            </summary>
            <param name="setVariable">SessionStateProxy.SetVariable method</param>
            <param name="proxyInstance">SessionStateProxy instance</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PsWrapperParameterBuilder.GetAllOutParameterValues(System.Reflection.Assembly,System.Type,System.Object,System.Int32)">
            <summary>
            Gets all the out/ref parameter values.
            </summary>
            <param name="sessionStateProxy">Type of SessionStateProxy</param>
            <param name="paramsLength">Length of parameters</param>
            <param name="proxyInstance">SessionStateProxy instance</param>
            <param name="sysMgmtAutoAssembly">System management automation assembly</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PsWrapperParameterBuilder.ResolveObjectFromPSObject(System.Reflection.Assembly,System.Object)">
            <summary>
            A helper method which resolve psobject to real object.
            </summary>
            <param name="sysMgmtAutoAssembly">System management automation assembly</param>
            <param name="psObjectInstance">psobject instance</param>
            <returns>Returns the real object</returns>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.PsWrapperParameterBuilder.HasRetValue">
            <summary>
            Gets whether the invoked method has return value.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.PsWrapperParameterBuilder.RetType">
            <summary>
            Gets the return type.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.PsWrapperParameterBuilder.RetValue">
            <summary>
            Gets or sets the return value.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.PsWrapperParameterBuilder.OutArguments">
            <summary>
            Gets all the out/ref parameters.
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.PtfTestOutcome">
            <summary>
            Test outcome.
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.PtfTestOutcome.Failed">
            <summary>
            Test case failed
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.PtfTestOutcome.Inconclusive">
            <summary>
            Test case status is inconclusive
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.PtfTestOutcome.Passed">
            <summary>
            Test case passed
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.PtfTestOutcome.InProgress">
            <summary>
            Test case is in progress
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.PtfTestOutcome.Error">
            <summary>
            Test case encounters an error
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.PtfTestOutcome.Timeout">
            <summary>
            Test case is time out
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.PtfTestOutcome.Aborted">
            <summary>
            Test case is aborted
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.PtfTestOutcome.Unknown">
            <summary>
            Test case status is unknown
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.IProtocolTestContext">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.IProtocolTestContext.TestDeploymentDir">
            <summary>
            Gets and sets test deployment directory.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.IProtocolTestContext.TestOutcome">
            <summary>
            Gets and sets test case run outcome.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.IProtocolTestContext.TestMethodName">
            <summary>
            Gets and sets running test method name.
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.IProtocolTestNotify">
            <summary>
            An interface which provides methods for protocol tests' initialization and cleaning up. 
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.IProtocolTestNotify.OnTestStarted(System.Object,System.String,Microsoft.Protocols.TestTools.PtfTestOutcome,Microsoft.Protocols.TestTools.AssertExceptionHandler)">
            <summary>
            Should be called before each test method runs.
            </summary>
            <param name="testClass">Instance of the test class</param>
            <param name="testName">Test case name</param>
            <param name="testOutcome">Test outcome</param>
            <param name="exceptionHandler">Handler provided to process the assert exception</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.IProtocolTestNotify.OnTestFinished(System.Object,System.String,Microsoft.Protocols.TestTools.PtfTestOutcome,Microsoft.Protocols.TestTools.AssertExceptionHandler)">
            <summary>
            Should be called after each test method runs.
            </summary>
            <param name="testClass">Instance of the test class</param>
            <param name="testName">Test case name</param>
            <param name="testOutcome">Test outcome</param>
            <param name="exceptionHandler">Handler provided to process the assert exception</param>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.AssertExceptionHandler">
            <summary>
            A delegate which is used by <see xref="IProtocolTestNotify.OnTestStarted"/> and <see xref="IProtocolTestNotify.OnTestFinished"/>
            </summary>
            <param name="exception">Exception need to be handled</param>
            <returns>PtfTestOutcome corresponding to the assert exception</returns>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.IProtocolTestsManager">
            <summary>
            Internal use only. Interface between PTF and TCM.
            TCM should use this interface to inform PTF the status
            of overall tests run.
            An instance of this interface could be retrieved by
            ProtocolTestsManagerFactory.GetTestsManager()
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.IProtocolTestsManager.GetProtocolTestNotify(System.String)">
            <summary>
            Gets test notify
            </summary>
            <param name="testSuiteName">Test suite name</param>
            <returns>Test notify</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.IProtocolTestsManager.Initialize(Microsoft.Protocols.TestTools.IConfigurationData,Microsoft.Protocols.TestTools.IProtocolTestContext,System.String,System.String)">
            <summary>
            Initializes PTF test site before all tests run.
            </summary>
            <param name="config">PTF configuration data</param>
            <param name="context">PTF protocol testcontext</param>
            <param name="testSuiteName">Test suite name</param>
            <param name="testAssemblyName">Test assembly name</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.IProtocolTestsManager.Initialize(Microsoft.Protocols.TestTools.IConfigurationData,System.String,System.String,System.String)">
            <summary>
            Initializes PTF test site before all tests run.
            </summary>
            <param name="config">PTF configuration data</param>
            <param name="configPath">Ptfconfig deployment path</param>
            <param name="testSuiteName">Test suite name</param>
            <param name="testAssemblyName">Test assembly name</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.IProtocolTestsManager.GetTestSite(System.String)">
            <summary>
            Gets test site by test suite name.
            </summary>
            <param name="testSuiteName">Test suite name</param>
            <returns>Test site instance.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.IProtocolTestsManager.TestsRunCleanup">
            <summary>
            Indicates all test methods have been executed,
            and all test classes have been torn down.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.IProtocolTestsManager.CleanupTestSite(System.String)">
            <summary>
            cleanup after a test suite have been executed.
            </summary>
            <param name="testSuiteName">The test suite name which is used to get test site instance, and dispose it.</param>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.ProtocolTestCleanupAttribute">
            <summary>
            An internal attribute to callback test cleanup action through PTF.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ProtocolTestCleanupAttribute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.ProtocolTestInitializeAttribute">
            <summary>
            An internal attribute to callback test initialize action through PTF.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ProtocolTestInitializeAttribute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.ICheckerConfig">
            <summary>
            The checker configuration
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ICheckerConfig.AssertFailuresBeforeThrowException">
            <summary>
            The number of assert failures need to be bypassed.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ICheckerConfig.MaxFailuresToDisplayPerTestCase">
            <summary>
            The maximum failure messages need to be displayed.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.AdapterProxyHelpers.GetHelpMessage(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            Gets the help attribute content for the calling method.
            </summary>
            <param name="methodCall">The method call message from the adapter proxy.</param>
            <returns>The help message content.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.AdapterProxyHelpers.ParseResult(System.Type,System.String)">
            <summary>
            Parses the result and convert it to the corresponding type.
            </summary>
            <param name="type">The type of the result which should be converted to.</param>
            <param name="result">A string containing the name or value to convert. </param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.ParameterDataBuilder">
            <summary>
            This class is used to parse invoking method information and covert them to
            corresponding data tables.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ParameterDataBuilder.#ctor(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            Initializes the builder instance.
            </summary>
            <param name="methodCall">IMethodCallMessage from the adapter proxy containing the method information.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ParameterDataBuilder.Build">
            <summary>
             Parses method information and creates corresponding data tables.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ParameterDataBuilder.RetValType">
            <summary>
            The type of the method return value.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ParameterDataBuilder.InArgTypes">
            <summary>
            The types of the out-arguments.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ParameterDataBuilder.OutArgTypes">
            <summary>
            The types of the out-arguments.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ParameterDataBuilder.OutArgDataTable">
            <summary>
            The data table presenting the out-arguments.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ParameterDataBuilder.InArgDataTable">
            <summary>
            The data table presenting the in-arguments.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ParameterDataBuilder.HasReturnVal">
            <summary>
            Indicates if the method has a return value.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ParameterDataBuilder.HasInArg">
            <summary>
            Indicates if the method has in-arguments
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ParameterDataBuilder.HasOutArg">
            <summary>
            Indicates if the method has out-arguments
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ParameterDataBuilder.OutArgIndexes">
            <summary>
            Indicates the out argument positions in the passed-in parameters.
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.MethodHelpAttribute">
            <summary>
            Provides a helper attribute used by adapter methods.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.MethodHelpAttribute.#ctor">
            <summary>
            Disables the default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.MethodHelpAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with specified message.
            </summary>
            <param name="helpMessage">The helper message string.</param>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.MethodHelpAttribute.HelpMessage">
            <summary>
            Gets the content of the helper message.
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.PowerShellAdapterProxy">
            <summary>
            A class which is used as proxy for constructing IAdapter of PowerShell script type
            and executing methods in IAdapter.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PowerShellAdapterProxy.#ctor(System.String,System.Type)">
            <summary>
            Constructs a new command script adapter proxy.
            </summary>
            <param name="scriptDirectory">The path and file name of command script files.</param>
            <param name="typeToProxy">The type of adapter which the proxy works for.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PowerShellAdapterProxy.Reset(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            Can be overridden by extenders to do special processing of Reset.
            </summary>
            <param name="mcall"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PowerShellAdapterProxy.InvokeCompact(System.Runtime.Remoting.Messaging.IMethodCallMessage,System.String)">
            <summary>
            Proxy method for substitution of executing Initialize/Reset methods in adapter interface.
            </summary>
            <param name="mcall">The IMethodCallMessage containing method invoking data.</param>
            <param name="helpMessage">The help message from the attribute</param>
            <returns>Always void.</returns>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.PSParameterBuilder">
            <summary>
            A class that stores parameter information of the invoked adapter method.
            This class is only for PowerShell adapter internal use.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PSParameterBuilder.#ctor(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            Constructor of the PowerShell parameter builder class.
            </summary>
            <param name="methodCall">Method call message</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PSParameterBuilder.SetAllParametersAsVariables(System.Reflection.MethodInfo,System.Object)">
            <summary>
            Sets all parameters/properties as variables.
            </summary>
            <param name="setVariable">SessionStateProxy.SetVariable method</param>
            <param name="proxyInstance">SessionStateProxy instance</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PSParameterBuilder.GetAllOutParameterValues(System.Reflection.Assembly,System.Type,System.Object,System.Int32)">
            <summary>
            Gets all the out/ref parameter values.
            </summary>
            <param name="sessionStateProxy">Type of SessionStateProxy</param>
            <param name="paramsLength">Length of parameters</param>
            <param name="proxyInstance">SessionStateProxy instance</param>
            <param name="sysMgmtAutoAssembly">System management automation assembly</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PSParameterBuilder.ResolveObjectFromPSObject(System.Reflection.Assembly,System.Object)">
            <summary>
            A helper method which resolve psobject to real object.
            </summary>
            <param name="sysMgmtAutoAssembly">System management automation assembly</param>
            <param name="psObjectInstance">psobject instance</param>
            <returns>Returns the real object</returns>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.PSParameterBuilder.HasRetValue">
            <summary>
            Gets whether the invoked method has return value.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.PSParameterBuilder.RetType">
            <summary>
            Gets the return type.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.PSParameterBuilder.RetValue">
            <summary>
            Gets or sets the return value.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.PSParameterBuilder.OutArguments">
            <summary>
            Gets all the out/ref parameters.
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.ConfigurationDataProvider">
            <summary>
            Configuration data provider
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.ConfigurationDataProvider.InstallRegistryKey">
            <summary>
            Registry Key path indicates PTF installation information entry.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ConfigurationDataProvider.GetConfigurationData(System.String,System.String)">
            <summary>
            Gets the configuration data.
            </summary>
            <param name="testDeploymentDirectory">Test development directory</param>
            <param name="testSuiteName">Test suite name</param>
            <returns>The configuration data</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ConfigurationDataProvider.GetConfigFileShortNames(System.String)">
            <summary>
            Gets config file short names based on the given test suite name.
            </summary>
            <param name="testSuiteName">The test suite name</param>
            <returns>string array which contrains the names of configuration files</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ConfigurationDataProvider.GetTestSuiteDeployConfigFileName(System.String,System.String)">
            <summary>
            Gets the full path name of the deployment configuration file name.
            </summary>
            <param name="testDeploymentDirectory">The path of test suites deployment directory.</param>
            <param name="filename">The configuration file short name.</param>
            <returns>The full path name of the deployment configuration file name.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ConfigurationDataProvider.TryGetCheckerConfig``1(``0@)">
            <summary>
            Tries to get the check the configuration data.
            </summary>
            <typeparam name="T">check configuration type.</typeparam>
            <param name="checkConfig">check configuration data.</param>
            <returns>Returns true if successfully get the check configuration data, otherwise return false.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ConfigurationDataProvider.GetInstallationConfigFileName(System.String)">
            <summary>
            Gets config file based on the path of PTF installation directory which is specified by 
            <see cref="F:Microsoft.Protocols.TestTools.ConfigurationDataProvider.InstallRegistryKey"/> or <see cref="F:Microsoft.Protocols.TestTools.ConfigurationDataProvider.Wow64InstallRegistryKey"/>.
            Gets config file based on the path of PTF installation directory which is specified by <see cref="F:Microsoft.Protocols.TestTools.ConfigurationDataProvider.InstallRegistryKey"/>.
            </summary>
            <param name="filename">The configuration file name.</param>
            <returns>Full path name of the given configuration file.</returns>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ConfigurationDataProvider.SchemaFileShortName">
            <summary>
            Gets the configuration XML file schema short name.
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.ConfigurationPropertyName">
            <summary>
            A static class which contains the XML node names in the PTF configuration files. 
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.ConfigurationPropertyName.ServerName">
            <summary>
            Server name
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.ConfigurationPropertyName.BeaconLogServerName">
            <summary>
            Beacon log target server name
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.ConfigurationPropertyName.ProtocolName">
            <summary>
            Feature name
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.ConfigurationPropertyName.ProtocolVersion">
            <summary>
            Version
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.ConfigurationPropertyName.TestName">
            <summary>
            Test suite name
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.ConfigurationPropertyName.ExceptionFilter">
            <summary>
            Regex filter for preventing throwing exception from the failure of Assert
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.ConfigurationPropertyName.BypassFilter">
            <summary>
            Regex filter to judge the result together with condition 
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.ConfigurationReader">
            <summary>
            This class is used to read from test configuration files, get general 
            properties and information about adapters, sinks, etc.
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.IConfigurationData">
            <summary>
            Provides all data from PTF configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.IConfigurationData.GetAdapterConfig(System.String)">
            <summary>
            Abstract adapter class for all kinds of adapter
            </summary>
            <param name="adapterName">Adapter name</param>
            <returns>Adapter config instance</returns>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.IConfigurationData.LogSinks">
            <summary>
            Gets log sink configs
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.IConfigurationData.Profiles">
            <summary>
            Gets log profile configs
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.IConfigurationData.DefaultProfile">
            <summary>
            Gets the default log profile name
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.IConfigurationData.TestReportOutputFile">
            <summary>
            Gets the output path of log analysis report file.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.IConfigurationData.NeedGenerateReport">
            <summary>
            Gets whether it needs to generate log analysis report automatically
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.IConfigurationData.NeedAutoDisplay">
            <summary>
            Gets whether it needs to display the log analysis report after a test run
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.IConfigurationData.UseDefaultOutputDir">
            <summary>
            Gets whether it needs to use the default test deployment directory
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.IConfigurationData.RequirementFiles">
            <summary>
            Gets all the requirement spec file names
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.IConfigurationData.LogFiles">
            <summary>
            Gets all the log file names
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.IConfigurationData.InScope">
            <summary>
            Gets the in scope parameter value
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.IConfigurationData.OutScope">
            <summary>
            Gets the out of scope parameter value
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.IConfigurationData.Prefix">
            <summary>
            Gets the Document short name
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.IConfigurationData.VerboseMode">
            <summary>
            Gets whether it needs to use the verbose mode of reporting tool
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.IConfigurationData.Properties">
            <summary>
            Gets all the name-value collection properties
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ConfigurationReader.#ctor">
            <summary>
            Disables the default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ConfigurationReader.GetAdapterConfig(System.String)">
            <summary>
            Implement <see cref="M:Microsoft.Protocols.TestTools.IConfigurationData.GetAdapterConfig(System.String)"/>
            </summary>
            <param name="adapterName">The adapter name</param>
            <returns>Returns the abstract adapter config data</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ConfigurationReader.MergeXmlDocument(System.Xml.XmlDocument,System.Xml.XmlDocument)">
            <summary>
            Merges doc into docBase
            </summary>
            <param name="docBase"></param>
            <param name="doc"></param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ConfigurationReader.MergeConfigFiles(System.String[])">
            <summary>
            Merges multiple test configuration files including default and user defined ones into one XmlDocument.
            </summary>
            <param name="configFileNames">The names of test configuration files. It contains three elements.</param>
            <returns>The XmlDocument which contains data of all test configuration files.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ConfigurationReader.GetAdapterAttribute(System.String,System.String,System.String)">
            <summary>
            Gets the adapter attribute from test configuration file. This method is used for getting necessary 
            parameters in construction of adapters.
            </summary>
            <param name="adapterName">The name of adapter requested.</param>
            <param name="attributeName">The name of attribute requested.</param>
            <param name="attributeNamespaceURI">The namespaceURI of attribute requested.</param>
            <returns>The attribute in string as requested in test configuration file.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ConfigurationReader.TryGetAdapterAttribute(System.String,System.String,System.String)">
            <summary>
            Tries to get adapter attribute from test configuration file. This method is used for getting optional 
            parameters in the construction of adapters.
            </summary>
            <param name="adapterName">The name of adapter requested.</param>
            <param name="attributeName">The name of attribute requested.</param>
            <param name="attributeNamespaceURI">The namespaceURI of attribute requested.</param>
            <returns>The attribute in string as requested in test configuration file, or null, if not available.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ConfigurationReader.AttributeToInt(System.Xml.XmlNode,System.String,System.Int32)">
            <summary>
            Gets the int value from attribute.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ConfigurationReader.Navigator">
            <summary>
            This property returns the XPathNavigator of merged test configuration file.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ConfigurationReader.Manager">
            <summary>
            This property returns the XmlNamespaceManager of merged test configuration file.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ConfigurationReader.Document">
            <summary>
            The XmlDocument represents all configuration files.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ConfigurationReader.LogNode">
            <summary>
            Gets the root node of the log configuration.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ConfigurationReader.ReportNode">
            <summary>
            Gets the root node of the report configuration
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ConfigurationReader.NeedGenerateReport">
            <summary>
            Gets the switch need generate report
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ConfigurationReader.NeedAutoDisplay">
            <summary>
            Gets the switch need auto display test report
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ConfigurationReader.RequirementFiles">
            <summary>
            Gets the requirement table locations
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ConfigurationReader.LogFiles">
            <summary>
            Gets the test log locations
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ConfigurationReader.InScope">
            <summary>
            Implements <see cref="P:Microsoft.Protocols.TestTools.IConfigurationData.InScope"/>
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ConfigurationReader.Properties">
            <summary>
            Gets the properties from test configuration file.
            </summary>
            <returns>The NameValueCollection containing general properties.</returns>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ConfigurationReader.AssertFailuresBeforeThrowException">
            <summary>
            Gets the configuration that specifies whether it should throw an exception for assert/assume failure.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ConfigurationReader.MaxFailuresToDisplayPerTestCase">
            <summary>
            Gets the configuration which specifies the max bypassed failure messages 
            will be displayed in error message.
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.Config.PTFConfig">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.Config.PTFConfig.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.Config.PTFConfig.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.Config.PTFConfig.TestConfig">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
            &lt;xs:schema targetNamespace=&quot;http://schemas.microsoft.com/windows/ProtocolsTest/2007/07/TestConfig&quot;
                       xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;
                       xmlns:tc=&quot;http://schemas.microsoft.com/windows/ProtocolsTest/2007/07/TestConfig&quot;
                       elementFormDefault=&quot;qualified&quot; attributeFormDefault=&quot;unqualified&quot;&gt;
            
              &lt;!-- Adapter Base Type --&gt;
              &lt;!-- Interactive adapter, script adapter, managed adapter, RPC adapter
                   and user defined adapter must d [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.InteractiveAdapterProxy">
            <summary>
            A class which is used as proxy for constructing IAdapter of default type
            and executing methods in IAdapter.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.InteractiveAdapterProxy.#ctor(System.Type)">
            <summary>
            Constructs a new default type adapter proxy.
            </summary>
            <param name="typeToProxy">The type of adapter which the proxy works for.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.InteractiveAdapterProxy.Invoke(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            Proxy method for substitution of executing methods in adapter interface.
            </summary>
            <param name="methodCall">The IMessage containing method invoking data.</param>
            <returns>The IMessage containing method return data.</returns>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.AdapterConfig">
            <summary>
            An abstract class which stores the adapter information
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.AdapterConfig.#ctor(System.String)">
            <summary>
            Constructs an adapter configuration
            </summary>
            <param name="name">Adapter name</param>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.AdapterConfig.Name">
            <summary>
            Gets the adapter interface name
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.ManagedAdapterConfig">
            <summary>
            An abstract class which stores managed adapter information
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ManagedAdapterConfig.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructs a managed adapter instance
            </summary>
            <param name="name">Adapter name</param>
            <param name="adapterType">Adapter implementation class name</param>
            <param name="disablevalidation">True if it needs to disable validation</param>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ManagedAdapterConfig.AdapterType">
            <summary>
            Gets the adapter implementation class name
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ManagedAdapterConfig.Disablevalidation">
            <summary>
            Gets the value whether disables validation
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.CustomAdapterConfig">
            <summary>
            An abstract class which stores custom adapter information
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.CustomAdapterConfig.#ctor(System.String,System.String)">
            <summary>
            Constructs a customer adapter config.
            </summary>
            <param name="name">Adapter name</param>
            <param name="type">Adapter implementation class name</param>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.CustomAdapterConfig.Type">
            <summary>
            Gets the customer defined adapter type name,
            for example, "RPC"
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.InteractiveAdapterConfig">
            <summary>
            An abstract class which stores interactive adapter information
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.InteractiveAdapterConfig.#ctor(System.String)">
            <summary>
            Constructs an interactive adapter instance
            </summary>
            <param name="name">Adapter name</param>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.ScriptAdapterConfig">
            <summary>
            An abstract class which stores script adapter information
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ScriptAdapterConfig.#ctor(System.String,System.String)">
            <summary>
            Constructs a script adapter instance
            </summary>
            <param name="name">Adapter name</param>
            <param name="scriptDir">The directory name of the scripts path</param>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ScriptAdapterConfig.ScriptDir">
            <summary>
            Gets the directory name of scripts path
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.PowerShellAdapterConfig">
            <summary>
            An abstract class which stores PowerShell script adapter information
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PowerShellAdapterConfig.#ctor(System.String,System.String)">
            <summary>
            Constructs a PowerShell adapter instance
            </summary>
            <param name="name">Adapter name</param>
            <param name="scriptDir">The directory name of the PowerShell scripts path</param>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.PowerShellAdapterConfig.ScriptDir">
            <summary>
            Gets the directory name of the PowerShell script path
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.PsWrapperAdapterConfig">
            <summary>
            An abstract class which stores PowerShell script adapter information
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PsWrapperAdapterConfig.#ctor(System.String,System.String)">
            <summary>
            Constructs a PowerShell adapter instance
            </summary>
            <param name="name">Adapter name</param>
            <param name="scriptFile">The directory name of the PowerShell scripts path</param>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.PsWrapperAdapterConfig.ScriptFile">
            <summary>
            Gets the directory name of the PowerShell script path
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.LogSinkConfig">
            <summary>
            An abstract class which stores log sink config information
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.LogSinkConfig.#ctor(System.String)">
            <summary>
            Constructs a log sink config instance
            </summary>
            <param name="name">Log sink name</param>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.LogSinkConfig.Name">
            <summary>
            Gets or sets the log sink ID
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.CustomLogSinkConfig">
            <summary>
            An abstract class which stores custom log sink info
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.CustomLogSinkConfig.#ctor(System.String,System.String)">
            <summary>
            Constructs a customer log sink config instance
            </summary>
            <param name="name">Log sink name</param>
            <param name="type">Log sink implementation class name</param>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.CustomLogSinkConfig.Type">
            <summary>
            Gets or sets the implementation class name of a
            customer defined log sink.
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.FileLogSinkConfig">
            <summary>
            An abstract class which stores file log sink information
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.FileLogSinkConfig.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructs a file log sink config
            </summary>
            <param name="name">Sink name</param>
            <param name="directory">Log file directory</param>
            <param name="file">Log file name</param>
            <param name="format">Log file format</param>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.FileLogSinkConfig.Directory">
            <summary>
            Gets or sets the output directory
            of the log file
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.FileLogSinkConfig.File">
            <summary>
            Gets or sets the log file name
            like "file.txt", "file.xml"
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.FileLogSinkConfig.Format">
            <summary>
            Gets or sets the log file format
            which can only be "txt" or "xml"
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.ConsoleLogSinkConfig">
            <summary>
            An abstract class which stores console log sink config information
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ConsoleLogSinkConfig.#ctor(System.String,System.String)">
            <summary>
            Constructs a console log sink
            </summary>
            <param name="name">Log sink name</param>
            <param name="id">Log sink ID which is the unique name of the sink</param>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ConsoleLogSinkConfig.ID">
            <summary>
            Gets or sets the unique name of the console sink
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.ProfileRuleConfig">
            <summary>
            An abstract class which stores profile rule config information
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ProfileRuleConfig.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructs a log profile rule config
            </summary>
            <param name="kind">Log entry kind</param>
            <param name="sink">Log sink ID</param>
            <param name="delete">Indicates if this rule is disable</param>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ProfileRuleConfig.Kind">
            <summary>
            Gets the value which indicates the kind of message,
            for example, CheckSucceeded, Comment.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ProfileRuleConfig.Sink">
            <summary>
            Gets the sink ID for the given log kind.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ProfileRuleConfig.Delete">
            <summary>
            Gets whether the rule is disabled.
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.ProfileConfig">
            <summary>
            An abstract class which stores profile config information
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ProfileConfig.#ctor(System.String,System.String,System.Collections.ObjectModel.Collection{Microsoft.Protocols.TestTools.ProfileRuleConfig})">
            <summary>
            Constructs a log profile config
            </summary>
            <param name="name">Profile name</param>
            <param name="baseProfile">Parent profile name</param>
            <param name="rules">Profile Rules in this config</param>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ProfileConfig.Name">
            <summary>
            Gets the profile ID.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ProfileConfig.Rules">
            <summary>
            Gets all the rules in this profile.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ProfileConfig.BaseProfile">
            <summary>
            Gets the profile name that the current one is extended from.
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.RpcAdapterConfig">
            <summary>
            An abstract class which stores rpc adapter information
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.RpcAdapterConfig.#ctor(System.String,System.String,System.Boolean,System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
            <summary>
            Constructs an instance of this class by passing adapter name and type and whether to enable the auto validation.
            </summary>
            <param name="name">The name of the adapter</param>
            <param name="type">The adapter type</param>
            <param name="autoValidate">True if it needs to autovalidate by default, false means to ignore validation.</param>
            <param name="callingConvention">The calling convention specified by the user through the config, the value could be winapi, stdcall or cdecl</param>
            <param name="charset">The char set specified by the user through the config, the value could be auto, ansi or unicode</param>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.RpcAdapterConfig.Type">
            <summary>
            Gets the customer defined adapter type name,
            for example, "RPC"
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.RpcAdapterConfig.NeedAutoValidate">
            <summary>
            Gets the adapter implementation class name
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.RpcAdapterConfig.CallingConvention">
            <summary>
            Gets the calling convention specified by the user
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.RpcAdapterConfig.Charset">
            <summary>
            Gets the char set specified by the user
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.Logging.ApplicationLog">
            <summary>
            This class contains supporting PTF application log.
            </summary>    
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.ApplicationLog.#cctor">
            <summary>
            Static Constructor for ApplicationLog.
            </summary>  
            Failure on application log should not prevent the PTF from executing
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.ApplicationLog.TraceLog(System.String)">
            <summary>
            Write a message to Trace listeners
            </summary>
            <param name="message">The message to write to the log file</param>
            Failure on application log should not prevent the PTF from executing
        </member>
        <member name="T:Microsoft.Protocols.TestTools.Logging.LogSink">
            <summary>
            An abstract class which provides a generic view of a log sink.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.LogSink.#ctor">
            <summary>
            Disables the default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.LogSink.LogKindToMode(Microsoft.Protocols.TestTools.LogEntryKind)">
            <summary>
            Converts a log entry kind to the corresponding logging mode.
            </summary>
            <param name="kind">The kind of logging entry</param>
            <returns>The logging mode to be applied.</returns>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.Logging.LogSink.loggedBeginGroupEntries">
            <summary>
            The stack for logged begin group entries to verify if they match correct end group entries.
            Should push a kind when logging a begin group entry and pop 
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.LogSink.WriteEntry(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Writes a logging message to the current log sink.
            </summary>
            <param name="information">The information of the log entry.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.LogSink.OnWriteEntry(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Writes a non-group logging message to the current log sink.
            </summary>
            <param name="information">The information of the log entry.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.LogSink.OnWriteBeginGroup(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Writes a message as the beginning of a log group into the current log sink. 
            Entering and existing of a group logging message must be matched.
            </summary>
            <param name="information">The information of the log entry.</param>
            <remarks>Overridden this method should call the method of base to enable verifying
            if group entries are matched.</remarks>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.LogSink.OnWriteEndGroup(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Writes a message as the end of a log group into the current log sink. 
            Entering and existing of a group logging message must be matched.
            </summary>
            <param name="information">The information of the log entry.</param>
            <remarks>Overridden this method should call the method of base to enable verifying
            if group entries are matched.</remarks>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.LogSink.EnsureLoggingGroupMatching(Microsoft.Protocols.TestTools.LogEntryKind)">
            <summary>
            Checks whether the beginning and the endding of a group logging message are matched.
            If they are not matched, an InvalidOperationException exception will be raised.
            </summary>
            <param name="kind">A beginning group log entry kind.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.LogSink.GetMatchedEndGroupKind(Microsoft.Protocols.TestTools.LogEntryKind)">
            <summary>
            Gets the corresponding end group kind of a beginning group log kind.
            </summary>
            <param name="kind">The beginning of a group log kind.</param>
            <returns>The corresponding end group kind.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.LogSink.ReplaceInvalidChars(System.String)">
            <summary>
            Replace the invalid Unicode characters with \uXXXX
            </summary>
            <param name="message">Original message</param>
            <returns>Message without invalid Unicode chars</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.LogSink.#ctor(System.String)">
            <summary>
            Constructs a new instance of the <see cref="T:Microsoft.Protocols.TestTools.Logging.LogSink"/> class. 
            </summary>
            <param name="name">The specified sink name.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.LogSink.Flush">
            <summary>
            Flushes the logging information into the current sink. 
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.LogSink.Close">
            <summary>
            Closes the current sink and releases resources.  
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.Logging.LogSink.disposed">
            <summary>
            Indicates if the current sink has been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.LogSink.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method is called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            </summary>
            <param name="disposing">
            If disposing equals false, the method is called by the 
            runtime from inside the finalizer and you should not reference 
            other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.LogSink.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. 
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.LogSink.Finalize">
            <summary>
            This destructor will run only if the Dispose method 
            does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.Logging.LogSink.Name">
            <summary>
            Gets the name of the current sink.
            </summary>
            <value>The name of the sink.</value>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.Logging.LogSink.NotifyImmediately">
            <summary>
            Gets the value to specify whether the log sink need to notify immediately.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.Logging.LogSink.IsDisposed">
            <summary>
            Gets or sets the disposing status.
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.Logging.LogSink.LogMode">
            <summary>
            An enumeration type used to represents the mode which logging message should be logged as.
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.Logging.LogSink.LogMode.EntryMode">
            <summary>
            Indicates logging a message as an independ logging entry.
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.Logging.LogSink.LogMode.BeginGroupMode">
            <summary>
            Indicates logging a message as the beginning of a logging group. 
            For example, LogEntryKind.BeginGroup, LogEntryKind.EnterAdapter, LogEntryKind.EnterMethod, etc.
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.Logging.LogSink.LogMode.EndGroupMode">
            <summary>
            Indicates logging a message as the end of a logging group.
            For example, LogEntryKind.ExitGroup, LogEntryKind.ExitAdapter, LogEntryKind.ExitMethod, etc.            
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.Logging.TsapDataBuilder">
            <summary>
            TsapDataBuilder is used to collect information and encode them into a byte[] buffer.
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.Logging.LogProvider">
            <summary>
            Only for internal use. An abstract base class provides a specified group of log information.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.LogProvider.Initialize(Microsoft.Protocols.TestTools.ITestSite)">
            <summary>
            Initializes the LogProvider instances.
            </summary>
            <param name="testSite">The test site which this LogProvider is hosted in.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.LogProvider.PrepareLogInformation(Microsoft.Protocols.TestTools.LogEntryKind,System.String,System.DateTime,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Prepares the log information according to the log entry information. This method will be called
            before the log entry is added to all sinks.
            </summary>
            <param name="kind">Log information kind.</param>
            <param name="message">Log information string.</param>
            <param name="timeStamp">The timestamp when the log information is created.</param>
            <param name="testProperties">The current test runtime properties.</param>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.Logging.LogProvider.Information">
            <summary>
            Gets the log information.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.Logging.LogProvider.AllowOverride">
            <summary>
            Gets whether the information can be overridden. The default value is true.
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.Logging.ConsoleSink">
            <summary>
            A class which provides a sink for logging messages to the console.
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.Logging.TextSink">
            <summary>
            An abstract class which provides a generic view of a text log sink.
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.Logging.TextSink.newLine">
            <summary>
            The string is to be appended to the logging message as a return symbol (line terminator).
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.Logging.TextSink.indent">
            <summary>
            The string to be inserted for an indent. 
            Can be several spaces or tabs. 
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.Logging.TextSink.indentPositionString">
            <summary>
            Current indent string which needs to be insert before a indented message.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.TextSink.#ctor(System.String)">
            <summary>
            Initializes a new instance of a TextSink.
            </summary>
            <param name="name">The name of the sink.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.TextSink.Flush">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.Logging.LogSink.Flush"/>.
            Flushes <see cref="P:Microsoft.Protocols.TestTools.Logging.TextSink.Writer"/>. 
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.TextSink.Dispose(System.Boolean)">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.Logging.LogSink.Dispose(System.Boolean)"/>.
            </summary>
            <param name="disposing">
            If disposing equals false, the method is called by the 
            runtime from inside the finalizer and you should not reference 
            other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.TextSink.OnWriteEntry(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.Logging.LogSink.OnWriteEntry(System.Collections.Generic.Dictionary{System.String,System.Object})"/>.
            </summary>
            <param name="information">The information of the log entry.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.TextSink.OnWriteBeginGroup(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.Logging.LogSink.OnWriteBeginGroup(System.Collections.Generic.Dictionary{System.String,System.Object})"/>.
            </summary>
            <param name="information">The information of the log entry.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.TextSink.OnWriteEndGroup(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.Logging.LogSink.OnWriteEndGroup(System.Collections.Generic.Dictionary{System.String,System.Object})"/>.
            </summary>
            <param name="information">The information of the log entry.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.TextSink.WriteIndent(System.DateTime)">
            <summary>
            Insert a time stamp and indent places.
            </summary>
            <param name="timeStamp">The corresponding time stamp.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.TextSink.Write(System.String,System.Object[])">
            <summary>
            Replaces the format item in a specified message with the text equivalent 
            of the value of a corresponding object instance in a specified array. 
            </summary>
            <param name="message">A string containing zero or more format items. </param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.Logging.TextSink.Writer">
            <summary>
            Gets the text stream writer for dumping logs.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.ConsoleSink.#ctor(System.String)">
            <summary>
            Constructs an instance of the ConsoleSink class.
            </summary>
            <param name="name">The name of the sink.</param>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.Logging.ConsoleSink.Writer">
            <summary>
            Implements <see cref="P:Microsoft.Protocols.TestTools.Logging.TextSink.Writer"/>
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.Logging.PlainTextSink">
            <summary>
            A class which provides a log sink for logging messages to a plain-text file.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.PlainTextSink.#ctor(System.String,System.String)">
            <summary>
            Constructs an instance of PlainTextSink class.
            </summary>
            <param name="name">The name of the sink.</param>
            <param name="logFilename">The log file name which messages should be logged to.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.PlainTextSink.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method is called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            </summary>
            <param name="disposing">
            If disposing equals false, the method is called by the 
            runtime from inside the finalizer and you should not reference 
            other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.PlainTextSink.Flush">
            <summary>
            Flushes the writer.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.Logging.PlainTextSink.Writer">
            <summary>
            Gets the writer.
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.Logging.XmlTextSink">
            <summary>
            A class which provides a sink for logging messages to xml.
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.Logging.XmlSink">
            <summary>
            An abstract class which provides a generic view of an xml log sink.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.XmlSink.#ctor(System.String)">
            <summary>
            Initializes a new instance of XmlSink .
            </summary>
            <param name="name">The name of the sink.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.XmlSink.Flush">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.Logging.LogSink.Flush"/>.
            Flushes <see cref="P:Microsoft.Protocols.TestTools.Logging.XmlSink.Writer"/>. 
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.XmlSink.Dispose(System.Boolean)">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.Logging.LogSink.Dispose(System.Boolean)"/>.
            </summary>
            <param name="disposing">
            If disposing equals false, the method is called by the 
            runtime from inside the finalizer and you should not reference 
            other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.XmlSink.OnWriteEntry(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.Logging.LogSink.OnWriteEntry(System.Collections.Generic.Dictionary{System.String,System.Object})"/>.
            </summary>
            <param name="information">The information of the log entry.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.XmlSink.OnWriteBeginGroup(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.Logging.LogSink.OnWriteBeginGroup(System.Collections.Generic.Dictionary{System.String,System.Object})"/>.
            </summary>
            <param name="information">The information of the log entry.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.XmlSink.OnWriteEndGroup(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.Logging.LogSink.OnWriteEndGroup(System.Collections.Generic.Dictionary{System.String,System.Object})"/>.
            </summary>
            <param name="information">The information of the log entry.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.XmlSink.WriteXmlLogHeader">
            <summary>
            Runs at the first time of writing log entry, to produce xml log headers
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.XmlSink.GetTimeStampString(System.DateTime)">
            <summary>
            Gets a string which represents a timestamp in format of xs:dateTime.
            </summary>
            <param name="timeStamp">The corresponding timestamp.</param>
            <returns>a string presents the timestamp</returns>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.Logging.XmlSink.Writer">
            <summary>
            Gets the text stream writer for dumping logs.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.XmlTextSink.#ctor(System.String,System.String)">
            <summary>
            Constructs an instance of XmlTextSink class.
            </summary>
            <param name="name">The name of the sink.</param>
            <param name="logFilename">The log filename which messages should be logged to.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.XmlTextSink.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method is called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            </summary>
            <param name="disposing">
            If disposing equals false, the method is called by the 
            runtime from inside the finalizer and you should not reference 
            other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.Logging.XmlTextSink.Writer">
            <summary>
            Gets the writer.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.Logging.XmlTextSink.LogFileName">
            <summary>
            Gets the full name of the log file.
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.Logging.LoggingHelper">
            <summary>
            This class contains supporting functions for logging.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.LoggingHelper.#ctor">
            <summary>
            Disabled default constructor. Only static methods are intent in this class.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.LoggingHelper.GetString(System.String,System.Object[])">
            <summary>
            Retrieve a specified string from the resource.
            </summary>
            <param name="name">Name of the string.</param>
            <param name="parameters">An object array containing zero or more objects to format. </param>
            <returns>The corresponding string in the resource.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.LoggingHelper.PtfTestOutcomeToLogEntryKind(Microsoft.Protocols.TestTools.PtfTestOutcome)">
            <summary>
            Map a PtfTestOutcome value to its corresponding LogEntryKind value.
            </summary>
            <param name="unitTestOutcome">Unit test outcome</param>
            <returns>The log entry kind</returns>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.Logging.Logger">
            <summary>
            A class which provides logging functionality.
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.ILogger">
            <summary>
            An interface of logging infrastructure.
            </summary>
            <remarks>
            This interface describes a set of methods for test logging. A fixed number of test log entry
            kinds is supported. The single point to add a log entry is the <see cref="M:Microsoft.Protocols.TestTools.ILogger.Add(Microsoft.Protocols.TestTools.LogEntryKind,System.String,System.Object[])"/> method.
            <para> 
            Explicit logging in test code can usually be narrowed to a minimum because validation logic using the <see cref="T:Microsoft.Protocols.TestTools.IChecker"/>
            API automatically takes care of logging. Also, adapters as obtained by the test site (<see cref="T:Microsoft.Protocols.TestTools.ITestSite"/>) take 
            care of logging calls to the underlying SUT (log entry type <see cref="F:Microsoft.Protocols.TestTools.LogEntryKind.EnterAdapter"/>).
            </para>
            <para>
            Which kind of log messages are actually processed and which targets they are directed to depends on the
            logging profile which is defined in the test configuration of the test site. Test code can explicitly change 
            the logging profile using the <see cref="P:Microsoft.Protocols.TestTools.ILogger.ActiveLoggingProfile"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ILogger.Add(Microsoft.Protocols.TestTools.LogEntryKind,System.String,System.Object[])">
            <summary>
            Adds an entry to the log.
            </summary>
            <param name="kind">The log message kind.</param>
            <param name="message">A composite format string.</param>
            <param name="parameters">An Object array containing one or more objects to format.</param>        
            <remarks>
            The <paramref name="message"/> parameter uses an extended format string for logging. 
            In addition to the standard formats (see <see cref="M:System.String.Format(System.String,System.Object[])"/>), 
            the following codes are provided:
            <list type="bullet">
            <item>
                <c>{m}</c>: inserts the name of the executing method together with its parameters (the executing method
                is the caller of <see cref="M:Microsoft.Protocols.TestTools.ILogger.Add(Microsoft.Protocols.TestTools.LogEntryKind,System.String,System.Object[])"/>)
            </item>
            <item>
                <c>{t}</c>: inserts the name of the executing test.
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ILogger.AddTestStatistic">
            <summary>
            Adds the test result statistics to the log.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ILogger.IsActive(Microsoft.Protocols.TestTools.LogEntryKind)">
            <summary>
            Indicates whether the given log entry kind is actually active. This method can be used to guard
            expensive code to be executed only in the case where logging is enabled for the given
            entry kind.
            </summary>
            <param name="kind">Logs entry kind.</param>
            <returns>true indicates the given log kind is active; otherwise, false</returns>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ILogger.Site">
            <summary>
            Gets the test site this logging object is hosted on.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ILogger.ActiveLoggingProfile">
            <summary>
            Gets or sets the active logging profile. A logging profile is defined in the test configuration and
            describes what entries are actually logged and in which way (e.g. send beacon packages, etc.).
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ILogger.LogProfile">
            <summary>
            Gets the log profile
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.Logging.Logger.MaxCapability">
            <summary>
            Allowed maximum size of LogMessageQueue
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.Logging.Logger.disposed">
            <summary>
            Whether this class is disposed
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.Logging.Logger.sinkLocker">
            <summary>
            It only allows one sink write to the log file each time
            (Log entries should be organized in proper order)
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.Logging.Logger.hRead">
            <summary>
            By default the reader is disabled (until queue is not empty)
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.Logging.Logger.hWrite">
            <summary>
            By default the writer is enabled (will be disabled when queue exceeds max size)
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.Logger.#ctor">
            <summary>
            Disables the default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.Logger.#ctor(Microsoft.Protocols.TestTools.ITestSite)">
            <summary>
            Constructs a new Logger instance.
            </summary>
            <param name="testSite">The test site this logging object is hosted in.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.Logger.Run">
            <summary>
            Reads and processes log messages
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.Logger.WriteInfoToSinks(System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.List{Microsoft.Protocols.TestTools.Logging.LogSink})">
            <summary>
            Writes log info to sinks
            </summary>
            <param name="info">Log info</param>
            <param name="sinks">Log sinks</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.Logger.ProcessErrors">
            <summary>
            Process errors from log runner thread.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.Logger.RegisterLogProvider(Microsoft.Protocols.TestTools.Logging.LogProvider)">
            <summary>
            Registers a log provider to the current logger. The registered providers' properties 
            is to be appended into the information property bag and be delivered to log sinks.
            </summary>
            <param name="provider">The log provider instance to be registered.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.Logger.Dispose">
            <summary>
            Disposes this instance
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.Logger.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method is called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            This method will close all log sinks.
            </summary>
            <param name="disposing">
            If disposing equals false, the method is called by the 
            runtime from inside the finalizer and you should not reference 
            other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.Logger.Add(Microsoft.Protocols.TestTools.LogEntryKind,System.String,System.Object[])">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.ILogger.Add(Microsoft.Protocols.TestTools.LogEntryKind,System.String,System.Object[])"/>
            </summary>
            <param name="kind">The log message kind.</param>
            <param name="message">A composite format string.</param>
            <param name="parameters">An Object array containing one or more objects to format.</param>        
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.Logger.AvoidInvalidCall">
            <summary>
            Avoid calling any method if logger is disposed
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.Logger.AddTestStatistic">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.ILogger.AddTestStatistic"/>
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.Logger.IsActive(Microsoft.Protocols.TestTools.LogEntryKind)">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.ILogger.IsActive(Microsoft.Protocols.TestTools.LogEntryKind)"/>
            </summary>
            <param name="kind">Log entry kind.</param>
            <returns>True indicates the given log kind is active; otherwise, false.</returns>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.Logging.Logger.LogMessageQueue">
            <summary>
            The message queue to store log messages waiting for handling by logger thread.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.Logging.Logger.RunnerState">
            <summary>
            Gets the log runner thread state.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.Logging.Logger.Site">
            <summary>
            Implements <see cref="P:Microsoft.Protocols.TestTools.ILogger.Site"/>
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.Logging.Logger.ActiveLoggingProfile">
            <summary>
            Implements <see cref="P:Microsoft.Protocols.TestTools.ILogger.ActiveLoggingProfile"/>
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.Logging.LogProfile">
            <summary>
            Provides a view of log profiles which defined in a log configuration.
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.Logging.LogProfile.allSinks">
            <summary>
            A dictionary contains all the defined sinks.
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.Logging.LogProfile.profilesMap">
            <summary>
            Dictionary(profile name, Dictionary(sink name, List(LogEntryKind)))
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.LogProfile.#ctor">
            <summary>
            Initializes a new instance of LogProfile.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.LogProfile.IsSinkExist(System.String)">
            <summary>
            Indicates whether a sink with given name has been defined
            </summary>
            <param name="logSinkName">The name of the sink.</param>
            <returns>true indicates a sink is defined; otherwise, false</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.LogProfile.AddSink(System.String,Microsoft.Protocols.TestTools.Logging.LogSink)">
            <summary>
            Adds a named log sink to the current logging profiles context.
            </summary>
            <param name="logSinkName">The name of the sink</param>
            <param name="sink">An instance of LogSink.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.LogProfile.RemoveProfileEntry(System.String,Microsoft.Protocols.TestTools.LogEntryKind,System.String)">
            <summary>
            Removes an entry from the specified logging profile.
            </summary>
            <param name="profileName">Logging profile name.</param>
            <param name="kind">The kind of the log entry.</param>
            <param name="sinkName">The name of the sink.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.LogProfile.AddProfileEntry(System.String,Microsoft.Protocols.TestTools.LogEntryKind,System.String)">
            <summary>
            Adds an entry to the specified logging profile.
            </summary>
            <param name="profileName">Logging profile name.</param>
            <param name="kind">The kind of the log entry.</param>
            <param name="sinkName">The name of the sink.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.LogProfile.GetSinksOfProfile(System.String,Microsoft.Protocols.TestTools.LogEntryKind)">
            <summary>
            Gets all the log sink instances of a profile.
            </summary>
            <param name="profileName">The name of the profile.</param>
            <param name="kind">The log kind which the result sinks associated with.</param>
            <returns>A list which contains the log sinks.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.LogProfile.GetActiveKindsOfProfile(System.String)">
            <summary>
            Gets a list of active logging kinds.
            </summary>
            <param name="profileName">The log profile name.</param>
            <returns>A list which contains the log kindss.</returns>
            <remarks>An active kind means at least one sink is receiving logs with this kind.</remarks>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.Logging.LogProfile.AllSinks">
            <summary>
            Retrieves all defined sink instances.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.Logging.LogProfile.ProfilesMap">
            <summary>
            Gets a table which represents profile entries.
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.Logging.LogProfileParser">
            <summary>
            Parses the logging profile related information from the configuration file.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.Logging.LogProfileParser.CreateLogProfileFromConfig(Microsoft.Protocols.TestTools.IConfigurationData,System.String)">
            <summary>
            Parses the configuration file and creates an instance of <see cref="T:Microsoft.Protocols.TestTools.Logging.LogProfile"/> .
            </summary>
            <returns>An instance of LogProfile.</returns>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.Logging.LogProfileParser.ActiveProfileNameInConfig">
            <summary>
            Gets the active profile name of specified in the configuration.
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.Logging.Messages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.Logging.Messages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.Logging.Messages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.Logging.Messages.AreEqualFailMsg">
            <summary>
              Looks up a localized string similar to Expected: &lt;{0}&gt;, Actual: &lt;{1}&gt;. {2}.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.Logging.Messages.AreNotEqualFailMsg">
            <summary>
              Looks up a localized string similar to Expected: &lt;{0}&gt;, Actual: &lt;{1}&gt;. {2}.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.Logging.Messages.CheckFailed">
            <summary>
              Looks up a localized string similar to {0}.{1} failed. {2}.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.Logging.Messages.CheckFailedOnReqId">
            <summary>
              Looks up a localized string similar to {0}.{1} failed on requirement {2}. {3}.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.Logging.Messages.CheckInconclusive">
            <summary>
              Looks up a localized string similar to {0}.{1} is inconclusive. {2}.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.Logging.Messages.CheckSucceeded">
            <summary>
              Looks up a localized string similar to {0}.{1} succeeded. {2}.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.Logging.Messages.EntryKindMissMatch">
            <summary>
              Looks up a localized string similar to The kind of message log entry must match..
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.Logging.Messages.EntryTypeLogFilterArguementMessage">
            <summary>
              Looks up a localized string similar to entryType does not implement the ILogEntry interface.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.Logging.Messages.IsInstanceOfFailMsg">
            <summary>
              Looks up a localized string similar to Expected Type: &lt;{0}&gt;, Actual Type: &lt;{1}&gt;. {2}.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.Logging.Messages.IsNotInstanceOfFailMsg">
            <summary>
              Looks up a localized string similar to Wrong Type: &lt;{0}&gt;, Actual Type: &lt;{1}&gt;. {2}.
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.ITestSite">
            <summary>
            An interface which provides logging, assertions, and SUT adapters for test code onto its execution context.
            </summary>
            <remarks>
            This interface constitutes the anchor for the communication of test code with its execution context. 
            It provides information about the currently executing test, the logger to use, the assertion verifier to use,
            and the adapters to the underlying SUT. It also provides generic access to properties defined in the test
            configuration. 
            </remarks>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ITestSite.GetAdapter``1">
            <summary>
            Returns an adapter implementation for the given adapter interface type.
            </summary>
            <typeparam name="T">The adapter interface type</typeparam>
            <returns>An adapter instance of the given type</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ITestSite.GetAdapter(System.Type)">
            <summary>
            Returns an adapter implementation for the given adapter interface type.
            </summary>
            <param name="adapterType">The adapter interface type.</param>
            <returns>An adapter of the given type.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ITestSite.ReportAsyncErrorToTcm(System.String,System.Object[])">
            <summary>
            Reports the error message to Tcm.
            This method is obsolete.
            </summary>
            <param name="formatString">A composite format string.</param>
            <param name="parameters">An Object array containing one or more objects to format.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ITestSite.CheckErrors">
            <summary>
            Checks errors in each checker.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ITestSite.RegisterCheckers(System.Collections.Generic.IDictionary{Microsoft.Protocols.TestTools.CheckerKinds,Microsoft.Protocols.TestTools.IChecker})">
            <summary>
            Initializes all checker instances
            </summary>
            <param name="checkers">All checkers need to register into test site</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirement(System.String,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Logs requirement as a checkpoint
            </summary>
            <param name="protocolDocShortName">User provide protocol short name</param>
            <param name="requirementId">The unique requirement number</param>
            <param name="description">The description of requirement</param>
            <param name="requirementType">Type of the requirement(May, Should, Must or Product).</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfAreEqual``1(``0,``0,System.String,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Verifies that the actual value is equal to the expected value. Capture a requirement if the verification succeeds.
            </summary>
            <typeparam name="T">The type of values for check</typeparam>
            <param name="expected">Expect value</param>
            <param name="actual">Actual value</param>
            <param name="protocolDocShortName">User provide protocol short name</param>
            <param name="requirementId">The unique requirement number</param>
            <param name="description">The description of requirement</param>
            <param name="requirementType">Type of the requirement(May, Should, Must or Product)</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfAreNotEqual``1(``0,``0,System.String,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Verifies that the actual value is not equal to the expected value. Capture a requirement if the verification succeeds.
            </summary>
            <typeparam name="T">The type of values for check</typeparam>
            <param name="expected">Expect value</param>
            <param name="actual">Actual value</param>
            <param name="protocolDocShortName">User provide protocol short name</param>
            <param name="requirementId">The unique requirement number</param>
            <param name="description">The description of requirement</param>
            <param name="requirementType">Type of the requirement(May, Should, Must or Product).</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfAreSame(System.Object,System.Object,System.String,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Verifies that the actual value is the same as the expected value. Capture a requirement if the verification succeeds.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="protocolDocShortName">User provide protocol short name</param>
            <param name="requirementId">The unique requirement number</param>
            <param name="description">The description of requirement</param>
            <param name="requirementType">Type of the requirement(May, Should, Must or Product).</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfAreNotSame(System.Object,System.Object,System.String,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Verifies that the actual value is not the same as the expected value. Capture a requirement if the verification succeeds.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="protocolDocShortName">User provide protocol short name</param>
            <param name="requirementId">The unique requirement number</param>
            <param name="description">The description of requirement</param>
            <param name="requirementType">Type of the requirement(May, Should, Must or Product).</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfIsTrue(System.Boolean,System.String,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Verifies that the boolean condition is true. Capture a requirement if the verification succeeds.
            </summary>
            <param name="condition">The boolean expression of the condition</param>
            <param name="protocolDocShortName">User provide protocol short name</param>
            <param name="requirementId">The unique requirement number</param>
            <param name="description">The description of requirement</param>
            <param name="requirementType">Type of the requirement(May, Should, Must or Product).</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfIsFalse(System.Boolean,System.String,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Verifies that the boolean condition is false. Capture a requirement if the verification succeeds.
            </summary>
            <param name="condition">The boolean expression of the condition</param>
            <param name="protocolDocShortName">User provide protocol short name</param>
            <param name="requirementId">The unique requirement number</param>
            <param name="description">The description of requirement</param>
            <param name="requirementType">Type of the requirement(May, Should, Must or Product).</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfIsNull(System.Object,System.String,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Verifies that the value is null. Capture a requirement if the verification succeeds.
            </summary>
            <param name="value">The object value that needs to be checked.</param>
            <param name="protocolDocShortName">User provide protocol short name</param>
            <param name="requirementId">The unique requirement number</param>
            <param name="description">The description of requirement</param>
            <param name="requirementType">Type of the requirement(May, Should, Must or Product).</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfIsNotNull(System.Object,System.String,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Verifies that the value is not null. Capture a requirement if the verification succeeds.
            </summary>
            <param name="value">The object value that needs to be checked.</param>
            <param name="protocolDocShortName">User provide protocol short name</param>
            <param name="requirementId">The unique requirement number</param>
            <param name="description">The description of requirement</param>
            <param name="requirementType">Type of the requirement(May, Should, Must or Product).</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfIsInstanceOfType(System.Object,System.Type,System.String,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Verifies that the value is an instance of the expected type. Capture a requirement if the verification succeeds.
            </summary>
            <param name="value">Instance value</param>
            <param name="type">The expected instance type</param>
            <param name="protocolDocShortName">User provide protocol short name</param>
            <param name="requirementId">The unique requirement number</param>
            <param name="description">The description of requirement</param>
            <param name="requirementType">Type of the requirement(May, Should, Must or Product).</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfIsNotInstanceOfType(System.Object,System.Type,System.String,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Verifies that the value is not an instance of the expected type. Capture a requirement if the verification succeeds.
            </summary>
            <param name="value">Instance value</param>
            <param name="type">The expected instance type</param>
            <param name="protocolDocShortName">User provide protocol short name</param>
            <param name="requirementId">The unique requirement number</param>
            <param name="description">The description of requirement</param>
            <param name="requirementType">Type of the requirement(May, Should, Must or Product).</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfIsSuccess(System.Int32,System.String,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Verifies that the HRESULT value is success. Capture a requirement if the verification succeeds.
            </summary>
            <param name="handle">The HRESULT value to check</param>
            <param name="protocolDocShortName">User provide protocol short name</param>
            <param name="requirementId">The unique requirement number</param>
            <param name="description">The description of requirement</param>
            <param name="requirementType">Type of the requirement(May, Should, Must or Product).</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ITestSite.UnverifiedRequirement(System.String,System.Int32,System.String)">
            <summary>
            Logs requirement as unverified.
            </summary>
            <param name="protocolDocShortName">User provide protocol short name</param>
            <param name="requirementId">The unique requirement number</param>
            <param name="description">The description of requirement</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirement(System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Logs requirement as a checkpoint.
            </summary>
            <param name="requirementId">The unique requirement number</param>
            <param name="description">The description of requirement</param>
            <param name="requirementType">Type of the requirement(May, Should, Must or Product).</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfAreEqual``1(``0,``0,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Verifies that the actual value is equal to the expected value. Capture a requirement if the verification succeeds.
            </summary>
            <typeparam name="T">The type of values for check</typeparam>
            <param name="expected">Expect value</param>
            <param name="actual">Actual value</param>
            <param name="requirementId">The unique requirement number</param>
            <param name="description">The description of requirement</param>
            <param name="requirementType">Type of the requirement(May, Should, Must or Product).</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfAreNotEqual``1(``0,``0,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Verifies that the actual value is not equal to the expected value. Capture a requirement if the verification succeeds.
            </summary>
            <typeparam name="T">The type of values for check</typeparam>
            <param name="expected">Expect value</param>
            <param name="actual">Actual value</param>
            <param name="requirementId">The unique requirement number</param>
            <param name="description">The description of requirement</param>
            <param name="requirementType">Type of the requirement(May, Should, Must or Product).</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfAreSame(System.Object,System.Object,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Verifies that the actual value is the same as the expected value. Capture a requirement if the verification succeeds.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="requirementId">The unique requirement number</param>
            <param name="description">The description of requirement</param>
            <param name="requirementType">Type of the requirement(May, Should, Must or Product).</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfAreNotSame(System.Object,System.Object,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Verifies that the actual value is not the same as the expected value. Capture a requirement if the verification succeeds.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="requirementId">The unique requirement number</param>
            <param name="description">The description of requirement</param>
            <param name="requirementType">Type of the requirement(May, Should, Must or Product).</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfIsTrue(System.Boolean,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Verifies that the boolean condition is true. Capture a requirement if the verification succeeds.
            </summary>
            <param name="condition">The boolean expression of the condition</param>
            <param name="requirementId">The unique requirement number</param>
            <param name="description">The description of requirement</param>
            <param name="requirementType">Type of the requirement(May, Should, Must or Product).</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfIsFalse(System.Boolean,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Verifies that the boolean condition is false. Capture a requirement if the verification succeeds.
            </summary>
            <param name="condition">The boolean expression of the condition</param>
            <param name="requirementId">The unique requirement number</param>
            <param name="description">The description of requirement</param>
            <param name="requirementType">Type of the requirement(May, Should, Must or Product).</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfIsNull(System.Object,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Verifies that the value is null. Capture a requirement if the verification succeeds.
            </summary>
            <param name="value">The object value that needs to be checked.</param>
            <param name="requirementId">The unique requirement number</param>
            <param name="description">The description of requirement</param>
            <param name="requirementType">Type of the requirement(May, Should, Must or Product).</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfIsNotNull(System.Object,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Verifies that the value is not null. Capture a requirement if the verification succeeds.
            </summary>
            <param name="value">The object value that needs to be checked.</param>
            <param name="requirementId">The unique requirement number</param>
            <param name="description">The description of requirement</param>
            <param name="requirementType">Type of the requirement(May, Should, Must or Product).</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfIsInstanceOfType(System.Object,System.Type,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Verifies that the value is an instance of the expected type. Capture a requirement if the verification succeeds.
            </summary>
            <param name="value">Instance value</param>
            <param name="type">The expected instance type</param>
            <param name="requirementId">The unique requirement number</param>
            <param name="description">The description of requirement</param>
            <param name="requirementType">Type of the requirement(May, Should, Must or Product).</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfIsNotInstanceOfType(System.Object,System.Type,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Verifies that the value is not an instance of the expected type. Capture a requirement if the verification succeeds.
            </summary>
            <param name="value">Instance value</param>
            <param name="type">The expected instance type</param>
            <param name="requirementId">The unique requirement number</param>
            <param name="description">The description of requirement</param>
            <param name="requirementType">Type of the requirement(May, Should, Must or Product).</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfIsSuccess(System.Int32,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Verifies that the HRESULT value is success. Capture a requirement if the verification succeeds.
            </summary>
            <param name="handle">The HRESULT value to check</param>
            <param name="requirementId">The unique requirement number</param>
            <param name="description">The description of requirement</param>
            <param name="requirementType">Type of the requirement(May, Should, Must or Product).</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ITestSite.UnverifiedRequirement(System.Int32,System.String)">
            <summary>
            Logs requirement as unverified.
            </summary>
            <param name="requirementId">The unique requirement number</param>
            <param name="description">The description of requirement</param>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ITestSite.Properties">
            <summary>
            Gets the collection of properties taken from the test configuration. The content
            of the collection is not guranteed especially it can be used for passing configuration
            information to the test suite.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ITestSite.DefaultProtocolDocShortName">
            <summary>
            Gets or sets the default document short name.
            The property is used to store the document(protocol) short name to make requirements ID.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ITestSite.FeatureName">
            <summary>
            Gets the name of the feature (protocol) being tested.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ITestSite.TestName">
            <summary>
            Gets the name of the executing test provided by configuration file.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ITestSite.TestSuiteName">
            <summary>
            Gets the name of the test suite.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ITestSite.Log">
            <summary>
            Gets the logger associated with this test site.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ITestSite.Assert">
            <summary>
            Gets the checker for verifying the test execution results associated with this test site.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ITestSite.Assume">
            <summary>
            Gets the checker for verifying the environment associated with this test site.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ITestSite.Debug">
            <summary>
            Gets the checker for verifying the test case code associated with this test site.
            </summary>
        </member>
        <member name="E:Microsoft.Protocols.TestTools.ITestSite.TestStarted">
            <summary>
            TestStarted Event which is raised before a test is going to start. <see cref="T:Microsoft.Protocols.TestTools.TestStartFinishEventArgs"/>
            </summary>
        </member>
        <member name="E:Microsoft.Protocols.TestTools.ITestSite.TestFinished">
            <summary>
            TestFinished Event which is raised after a test is finished. <see cref="T:Microsoft.Protocols.TestTools.TestStartFinishEventArgs"/>
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ITestSite.TestResultsStatistics">
            <summary>
            Indicates the statistics of the results of the executed test cases
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ITestSite.TestProperties">
            <summary>
            Gets the runtime test related properties, such as current test case name.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ITestSite.Config">
            <summary>
            Gets the interface to query test configuration data
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ITestSite.TestAssemblyName">
            <summary>
            Gets the current test assembly name.
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.TestStartFinishEventArgs">
            <summary>
            A class which represents the event args used by <see cref="E:Microsoft.Protocols.TestTools.ITestSite.TestStarted"/> and <see cref="E:Microsoft.Protocols.TestTools.ITestSite.TestFinished"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.TestStartFinishEventArgs.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.TestStartFinishEventArgs.#ctor(System.String)">
            <summary>
            Constructs a TestStartFinishEventArgs instance which contains the test case name.
            </summary>
            <param name="testName">The current test case name.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.TestStartFinishEventArgs.#ctor(System.String,Microsoft.Protocols.TestTools.PtfTestOutcome)">
            <summary>
            Constructs a TestStartFinishEventArgs instance which contains the test case name.
            </summary>
            <param name="testName">The current test case name.</param>
            <param name="testOutcome">The current test outcome.</param>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.TestStartFinishEventArgs.TestName">
            <summary>
            Gets the current test case name.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.TestStartFinishEventArgs.TestOutcome">
            <summary>
            Gets the current test case outcome.
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.TestPropertyNames">
            <summary>
            A class which defines the test property names
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.TestPropertyNames.CurrentTestCaseName">
            <summary>
            Const string represents the current test case name
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.TestPropertyNames.CurrentTestOutcome">
            <summary>
            Const string represents the current test outcome
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.RequirementType">
            <summary>
            Requirement type
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.RequirementType.Must">
            <summary>
            Must requirement
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.RequirementType.Should">
            <summary>
            Should requirement
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.RequirementType.May">
            <summary>
            May requirement
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.RequirementType.Product">
            <summary>
            Product behavior
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.RequirementType.Undefined">
            <summary>
            Default requirement type
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.LogEntryKind">
            <summary>
            An enumeration type which represents the types of message log entries. 
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.LogEntryKind.BeginGroup">
            <summary>
            Indicates the beginning of logical test group.
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.LogEntryKind.EndGroup">
            <summary>
            Indicates the end of logical test group.
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.LogEntryKind.Checkpoint">
            <summary>
            Indicates a check point has passed. Captured requirements should be logged as this kind.
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.LogEntryKind.CheckSucceeded">
            <summary>
            Indicates an assertion verification has passed.
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.LogEntryKind.CheckFailed">
            <summary>
            Indicates an assertion verification has failed.
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.LogEntryKind.CheckInconclusive">
            <summary>
            Indicates the inability to determine a Pass or Fail. Typically it requires manual analysis.
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.LogEntryKind.CheckUnverified">
            <summary>
            Indicates something that could be verified, but currently is not. It is treated like CheckSucceeded.
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.LogEntryKind.EnterAdapter">
            <summary>
            Indicates entering test adapter code. Generally, PTF automatically logs this kind, and user should 
            not explicitly log it. The only exception is PTF can not log for managed adapter whose interface definition
            contains generic type.
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.LogEntryKind.ExitAdapter">
            <summary>
            Indicates exiting test adapter code. Generally, PTF automatically logs this kind, and user should 
            not explicitly log it. The only exception is PTF can not log for managed adapter whose interface definition
            contains generic type.
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.LogEntryKind.EnterMethod">
            <summary>
            Indicates entering test method code.
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.LogEntryKind.ExitMethod">
            <summary>
            Indicates exiting test method code
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.LogEntryKind.Settings">
            <summary>
            A free-style log entry for settings information.
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.LogEntryKind.Comment">
            <summary>
            A free-style log entry for comment information.
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.LogEntryKind.Warning">
            <summary>
            A free-style log entry for warning information.
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.LogEntryKind.Debug">
            <summary>
            A free-style log entry for debugging information. 
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.LogEntryKind.TestFailed">
            <summary>
            PTF internal use only. Indicates the outcome of a test is failed.
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.LogEntryKind.TestInconclusive">
            <summary>
            PTF internal use only. Indicates the outcome of a test is inconclusive.
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.LogEntryKind.TestPassed">
            <summary>
            PTF internal use only. Indicates the outcome of a test is passed.
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.LogEntryKind.TestInProgress">
            <summary>
            PTF internal use only. Indicates the status of a test is in progress.
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.LogEntryKind.TestError">
            <summary>
            PTF internal use only. Indicates the outcome of a test is error.
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.LogEntryKind.TestTimeout">
            <summary>
            PTF internal use only. Indicates the outcome of a test is timeout.
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.LogEntryKind.TestAborted">
            <summary>
            PTF internal use only. Indicates the outcome of a test is aborted.
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.LogEntryKind.TestUnknown">
            <summary>
            PTF internal use only. Indicates the outcome of a test is unknown.
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.LogEntryKind.ExceptionalRequirement">
            <summary>
            PTF internal use only. Indicates an assertion verification has failed but can be ignored
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.LogEntryKind.TestStep">
            <summary>
            Indicates a test step.
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.AvailableLogMessage">
            <summary>
            A class to represent the available log message.
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.AvailableLogMessage.disposed">
            <summary>
            Whether this class is disposed
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.AvailableLogMessage.logInfo">
            <summary>
            Log information
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.AvailableLogMessage.logSinks">
            <summary>
            Log sinks
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.AvailableLogMessage.endOfLog">
            <summary>
            Whether this message is the end of log
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.AvailableLogMessage.#ctor(System.Collections.Generic.IList{Microsoft.Protocols.TestTools.Logging.LogSink},System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="sinks">Available types of log sinks.</param>
            <param name="info">Information to be logged.</param>
            <param name="isEndOfLog">Whether this message is the end of log</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.AvailableLogMessage.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.AvailableLogMessage.Dispose">
            <summary>
            Releases resources
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.AvailableLogMessage.Dispose(System.Boolean)">
            <summary>
            Releases resources
            </summary>
            <param name="disposing">
            If disposing equals true, managed and unmanaged resources are disposed;
            else only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.AvailableLogMessage.LogInfo">
            <summary>
            Gets all the entries of log information.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.AvailableLogMessage.LogSinks">
            <summary>
            Gets available types of log sinks.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.AvailableLogMessage.EndOfLog">
            <summary>
            Whether this message is the end of log.
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.IAdapter">
            <summary>
            An interface that every adapter must implement.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.IAdapter.Initialize(Microsoft.Protocols.TestTools.ITestSite)">
            <summary>
            Initializes the current adapter instance and associates with a test site.
            </summary>
            <remarks>
            This method is called automatically by <see cref="M:Microsoft.Protocols.TestTools.ITestSite.GetAdapter(System.Type)"/>. User needs not call it directly.
            </remarks>
            <param name="testSite">The test site instance associated with the current adapter.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.IAdapter.Reset">
            <summary>
            This method is called before each test case runs. User dose not need to call it directly.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.IAdapter.Site">
            <summary>
            Gets the test site associated with this adapter.
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.AdapterType">
            <summary>
            A class which contains static methods used to determine adapter types.
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.AdapterType.fullName">
            <summary>
            The adapter base type's full name. 
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.AdapterType.#ctor">
            <summary>
            Disables the default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.AdapterType.IsAdapterTypeFullName(System.String)">
            <summary>
             Gets a bool value which indicates whether the specified string is the full name of the adapter base type . 
            </summary>
            <param name="typeFullName">The full name of the type.</param>
            <returns>true if it equals the adapter base type's full name; otherwise, false.</returns>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.AdapterType.AdapterTypeFullName">
            <summary>
            Gets the full name of adapter base type.
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.CheckerKinds">
            <summary>
            All checker kinds that PTF supported
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.CheckerKinds.AssertChecker">
            <summary>
            The assert checker
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.CheckerKinds.AssumeChecker">
            <summary>
            The assume checker
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.CheckerKinds.DebugChecker">
            <summary>
            The debug checker
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.IChecker">
            <summary>
            An interface which is used for providing test validation and verification infrastructure.
            </summary>
            <remarks>
            This interface describes a set of methods which allow validation of data. Protocol test code should direct all
            validation code to those methods.
            <para>
            The current test's execution stops when an assertion fails, and an according entry is automatically
            created in the test log. Depending on log settings, an entry may also be created if an assertion succeeds. In general,
            test code should not and does not need to provide extra logging output related to an assertion pass or failure.
            </para>
            <para>
            All assertion methods are required to have a message string format parameter and an optional array of objects which is applied to 
            that message format using <see cref="M:System.String.Format(System.String,System.Object[])"/>. These methods does not support omitting that message, and also does not support 
            giving a simple string instead of a format string. Therefore, formatting characters must be always escaped
            in the format string (write "{{" for "{" and "}}" for "}").
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.IChecker.CheckErrors">
            <summary>
            Checks if any error occurs.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.IChecker.Fail(System.String,System.Object[])">
            <summary>
            Raises a failure assertion. 
            </summary>
            <param name="message">A composite format string.</param>
            <param name="parameters">An Object array containing one or more objects to format.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.IChecker.Pass(System.String,System.Object[])">
            <summary>
            Raises a successful assertion. 
            </summary>
            <param name="message">A composite format string.</param>
            <param name="parameters">An Object array containing one or more objects to format.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.IChecker.Inconclusive(System.String,System.Object[])">
            <summary>
            Raises an inconclusive assertion.
            </summary>
            <param name="message">A composite format string.</param>
            <param name="parameters">An Object array containing one or more objects to format.</param>        
        </member>
        <member name="M:Microsoft.Protocols.TestTools.IChecker.AreEqual``1(``0,``0,System.String,System.Object[])">
            <summary>Verifies that two specified values are equal. 
            </summary>
            <typeparam name="T">The type of the objects to compare</typeparam>
            <param name="expected">The first object to compare. This is the object the test expects.</param>
            <param name="actual">The second object to compare. This is the object the test produced.</param>
            <param name="message">A composite format string.</param>
            <param name="parameters">An Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.IChecker.AreNotEqual``1(``0,``0,System.String,System.Object[])">
            <summary>
            Verifies that two specified values are not equal.  
            </summary>
            <typeparam name="T">The type of the objects to compare</typeparam>
            <param name="expected">The first object to compare. This is the object the test expects.</param>
            <param name="actual">The second object to compare. This is the object the test produced.</param>
            <param name="message">A composite format string.</param>
            <param name="parameters">An Object array containing zero or more objects to format.</param>        
        </member>
        <member name="M:Microsoft.Protocols.TestTools.IChecker.AreSame(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Verifies that two specified object references refer to the same object.  
            </summary>
            <param name="expected">The first object to compare. This is the object the test expects.</param>
            <param name="actual">The second object to compare. This is the object the test produced.</param>
            <param name="message">A composite format string.</param>
            <param name="parameters">An Object array containing zero or more objects to format.</param>        
        </member>
        <member name="M:Microsoft.Protocols.TestTools.IChecker.AreNotSame(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Verifies that two specified object references do not refer to the same object.  
            </summary>
            <param name="expected">The first object to compare. This is the object the test expects.</param>
            <param name="actual">The second object to compare. This is the object the test produced.</param>
            <param name="message">A composite format string.</param>
            <param name="parameters">An Object array containing zero or more objects to format.</param>        
        </member>
        <member name="M:Microsoft.Protocols.TestTools.IChecker.IsTrue(System.Boolean,System.String,System.Object[])">
            <summary>
            Verifies that the given bool value is true.
            </summary>
            <param name="value">The bool value to check</param>
            <param name="message">A composite format string.</param>
            <param name="parameters">An Object array containing zero or more objects to format.</param>        
        </member>
        <member name="M:Microsoft.Protocols.TestTools.IChecker.IsFalse(System.Boolean,System.String,System.Object[])">
            <summary>
            Verifies that the given bool value is false.
            </summary>
            <param name="value">The bool value to check</param>
            <param name="message">A composite format string.</param>
            <param name="parameters">An Object array containing zero or more objects to format.</param>        
        </member>
        <member name="M:Microsoft.Protocols.TestTools.IChecker.IsNotNull(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the given object reference is not null.
            </summary>
            <param name="value">The object check</param>
            <param name="message">A composite format string.</param>
            <param name="parameters">An Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.IChecker.IsNull(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the given reference is null.
            </summary>
            <param name="value">The object check</param>
            <param name="message">A composite format string.</param>
            <param name="parameters">An Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.IChecker.IsInstanceOfType(System.Object,System.Type,System.String,System.Object[])">
            <summary>
            Verifies that the given object is an instance of the given type.
            </summary>
            <param name="value">The object value to check</param>
            <param name="type">The object type to check</param>
            <param name="message">A composite format string.</param>
            <param name="parameters">An Object array containing zero or more objects to format.</param>        
        </member>
        <member name="M:Microsoft.Protocols.TestTools.IChecker.IsNotInstanceOfType(System.Object,System.Type,System.String,System.Object[])">
            <summary>
            Verifies that the given object is not an instance of the given type.
            </summary>
            <param name="value">The object value to check</param>
            <param name="type">The object type to check</param>
            <param name="message">A composite format string.</param>
            <param name="parameters">An Object array containing zero or more objects to format.</param>        
        </member>
        <member name="M:Microsoft.Protocols.TestTools.IChecker.IsSuccess(System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that the given error code is indicating a successful result.
            </summary>
            <param name="hresult">The HRESULT value to check</param>
            <param name="message">A composite format string.</param>
            <param name="parameters">An Object array containing zero or more objects to format.</param>        
        </member>
        <member name="M:Microsoft.Protocols.TestTools.IChecker.Unverified(System.String,System.Object[])">
            <summary>
            Indicates something that could not be verified currently.  
            </summary>
            <param name="message">A composite format string.</param>
            <param name="parameters">An Object array containing zero or more objects to format.</param>     
        </member>
        <member name="P:Microsoft.Protocols.TestTools.IChecker.Site">
            <summary>
            Gets the test site which this checker object is hosted on.
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.Logging.PTFLogging">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.Logging.PTFLogging.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.Logging.PTFLogging.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.Logging.PTFLogging.TestLog">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
            &lt;xs:schema targetNamespace=&quot;http://schemas.microsoft.com/windows/ProtocolsTest/2007/07/TestLog&quot;
            xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;
            xmlns:tl=&quot;http://schemas.microsoft.com/windows/ProtocolsTest/2007/07/TestLog&quot;
            elementFormDefault=&quot;qualified&quot; attributeFormDefault=&quot;unqualified&quot;&gt;
            
              &lt;!-- log entry base --&gt;
              &lt;xs:complexType name=&quot;logEntryType&quot;&gt;
                &lt;xs:sequence&gt;
                  &lt;xs:element name=&quot;Message&quot; type=&quot;xs:string&quot; /&gt;
                &lt;/xs:sequence&gt;
                &lt;xs:attribute nam [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.ManagedAdapterBase">
            <summary>
            An abstract base class of managed adapters.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ManagedAdapterBase.Initialize(Microsoft.Protocols.TestTools.ITestSite)">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.IAdapter.Initialize(Microsoft.Protocols.TestTools.ITestSite)"/>. 
            </summary>
            <remarks>
            This method is called automatically by <see cref="M:Microsoft.Protocols.TestTools.DefaultTestSite.GetAdapter(System.Type)"/>. User needs not call it directly.
            </remarks>
            <param name="testSite">The test site instance associated with the current adapter.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ManagedAdapterBase.Reset">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.IAdapter.Reset"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ManagedAdapterBase.IsAdapterType(System.Type)">
            <summary>
            Indicates whether a given type implements <see cref="T:Microsoft.Protocols.TestTools.IAdapter"/>.
            </summary>
            <param name="type">The type to check</param>
            <returns>true if the type implements <see cref="T:Microsoft.Protocols.TestTools.IAdapter"/>; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ManagedAdapterBase.IsAdapterMethod(System.Reflection.MemberInfo)">
            <summary>
            Indicates whether a given method is declared in an adapter interface (i.e., an interface derived from
            <see cref="T:Microsoft.Protocols.TestTools.IAdapter"/>).
            </summary>
            <param name="method">The method to check</param>
            <returns>true if the method is declared in an adapter interface; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ManagedAdapterBase.Dispose">
            <summary>
            Implements <see cref="M:System.IDisposable.Dispose"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ManagedAdapterBase.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method is called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            </summary>
            <param name="disposing">
            If disposing equals false, the method is called by the 
            runtime from inside the finalizer and you should not reference 
            other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ManagedAdapterBase.Finalize">
            <summary>
            This destructor runs only if the Dispose method does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ManagedAdapterBase.Site">
            <summary>
            Implements <see cref="P:Microsoft.Protocols.TestTools.IAdapter.Site"/>. 
            </summary>  
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ManagedAdapterBase.IsDisposed">
            <summary>
            Gets or sets the disposing status.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ManagedAdapterProxy.#ctor(System.Type,System.Type)">
            <summary>
            Constructs a new managed adapter proxy.
            </summary>
            <param name="adapterType">The managed adapter type</param>
            <param name="typeToProxy">The type of adapter which the proxy works for.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ManagedAdapterProxy.Initialize(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            Initializes the managed adapter.
            This method can be overridden by extenders to do special initialization code.
            It calls base class's Initialize method to ensure the test site is initialized.
            </summary>
            <param name="methodCall"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ManagedAdapterProxy.GetSite(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            Can be overridden by extenders to do special processing of TestSite getter.
            </summary>
            <param name="methodCall"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ManagedAdapterProxy.Reset(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            Can be overridden by extenders to do special processing of Reset.
            </summary>
            <param name="methodCall"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ManagedAdapterProxy.Dispose(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            Can be overridden by extenders to do special processing of Dispose.
            </summary>
            <param name="methodCall"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ManagedAdapterProxy.Invoke(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            Proxy method for substitution of executing methods in adapter interface.
            </summary>
            <param name="methodCall">The IMethodCallMessage containing method invoking data.</param>
            <returns>The IMessage containing method return data.</returns>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.DefaultTestSite">
            <summary>
            A class which implements <see cref="T:Microsoft.Protocols.TestTools.ITestSite"/>, based on an XML test configuration file.
            </summary>
            <remarks>
            For the detailed information about configuration file, please check the schema specification.
            </remarks>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.DefaultTestSite.reqIdFlag">
            <summary>
            A flag parameter used in checker methods
            (which indicates the presence of requirement id information)
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.#ctor(Microsoft.Protocols.TestTools.IConfigurationData,System.String,System.String,System.String)">
            <summary>
            Constructs a new instance of DefaultTestSite. 
            All checkers, loggers and adapter types are initialized in this constructor.
            </summary>
            <param name="config">Configuration data from ptfconfig</param>
            <param name="testDeploymentDirectory">The path of test suites deployment directory.</param>
            <param name="testSuiteName">The name of the test suite. The test site uses this name to find configuration files.</param>
            <param name="testAssemblyName">The test assembly name</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.RegisterCheckers(System.Collections.Generic.IDictionary{Microsoft.Protocols.TestTools.CheckerKinds,Microsoft.Protocols.TestTools.IChecker})">
            <summary>
            Implement <see cref="M:Microsoft.Protocols.TestTools.ITestSite.RegisterCheckers(System.Collections.Generic.IDictionary{Microsoft.Protocols.TestTools.CheckerKinds,Microsoft.Protocols.TestTools.IChecker})"/>
            </summary>
            <param name="checkers">All checkers need to register into test site</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.RegisterCustomAdapterTypes">
            <summary>
            Registers the all custom adapter types to this test site.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.ResetAdapters">
            <summary>
            Resets all adapters used in current test suite
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.DisposeAdapters">
            <summary>
            Disposes all adapters used in current test suite
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.RegisterCustomAdapterType(System.String,Microsoft.Protocols.TestTools.DefaultTestSite.CustomAdapterProvider)">
            <summary>
            Registers a custom adapter type.
            </summary>
            <param name="type">The name of the adapter type.</param>
            <param name="provider">The provider for the given adapter type.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.GetAdapter(System.Type)">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.ITestSite.GetAdapter(System.Type)"/>. 
            </summary>
            <remarks>
            For script and interactive adapter, test site provides the default implementations in PTF.
            For managed adapter, test site provides the class instances according to the configuration, and if no class type is defined, it returns null.
            The <see cref="M:Microsoft.Protocols.TestTools.IAdapter.Initialize(Microsoft.Protocols.TestTools.ITestSite)"/> method is automatically called before the instances is returned.
            </remarks>
            <param name="adapterType">The adapter interface type.</param>
            <returns>An adapter instance of the given type.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.GetAdapter``1">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.ITestSite.GetAdapter(System.Type)"/>
            </summary>
            <remarks>
            This method calls the <see cref="M:Microsoft.Protocols.TestTools.ITestSite.GetAdapter(System.Type)"/> method.
            </remarks>
            <typeparam name="T">The type of the adapter.</typeparam>
            <returns>An adapter instance of the given type.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.ReportAsyncErrorToTcm(System.String,System.Object[])">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.ITestSite.ReportAsyncErrorToTcm(System.String,System.Object[])"/>.  
            </summary> 
            <param name="formatString">A composite format string.</param>
            <param name="parameters">An Object array containing one or more objects to format.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.CheckErrors">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.ITestSite.CheckErrors"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.CaptureRequirement(System.String,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirement(System.String,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)"/>
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.CaptureRequirementIfAreEqual``1(``0,``0,System.String,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfAreEqual``1(``0,``0,System.String,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)"/>
            </summary>
            /// <typeparam name="T">The type of the compared values.</typeparam>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.CaptureRequirementIfAreNotEqual``1(``0,``0,System.String,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfAreNotEqual``1(``0,``0,System.String,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)"/>
            </summary>
            /// <typeparam name="T">The type of the compared values.</typeparam>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.CaptureRequirementIfAreSame(System.Object,System.Object,System.String,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfAreSame(System.Object,System.Object,System.String,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)"/>
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.CaptureRequirementIfAreNotSame(System.Object,System.Object,System.String,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfAreNotSame(System.Object,System.Object,System.String,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)"/>
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.CaptureRequirementIfIsTrue(System.Boolean,System.String,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfIsTrue(System.Boolean,System.String,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)"/>
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.CaptureRequirementIfIsFalse(System.Boolean,System.String,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfIsFalse(System.Boolean,System.String,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)"/>
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.CaptureRequirementIfIsNull(System.Object,System.String,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfIsNull(System.Object,System.String,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)"/>
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.CaptureRequirementIfIsNotNull(System.Object,System.String,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfIsNotNull(System.Object,System.String,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)"/>
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.CaptureRequirementIfIsInstanceOfType(System.Object,System.Type,System.String,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfIsInstanceOfType(System.Object,System.Type,System.String,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)"/>
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.CaptureRequirementIfIsNotInstanceOfType(System.Object,System.Type,System.String,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfIsNotInstanceOfType(System.Object,System.Type,System.String,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)"/>
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.CaptureRequirementIfIsSuccess(System.Int32,System.String,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfIsSuccess(System.Int32,System.String,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)"/>
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.UnverifiedRequirement(System.String,System.Int32,System.String)">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.ITestSite.UnverifiedRequirement(System.String,System.Int32,System.String)"/>
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.CaptureRequirement(System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirement(System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)"/>
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.CaptureRequirementIfAreEqual``1(``0,``0,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfAreEqual``1(``0,``0,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)"/>
            </summary>
            /// <typeparam name="T">The type of the compared values.</typeparam>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.CaptureRequirementIfAreNotEqual``1(``0,``0,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfAreNotEqual``1(``0,``0,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)"/>
            </summary>
            /// <typeparam name="T">The type of the compared values.</typeparam>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.CaptureRequirementIfAreSame(System.Object,System.Object,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfAreSame(System.Object,System.Object,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)"/>
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.CaptureRequirementIfAreNotSame(System.Object,System.Object,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfAreNotSame(System.Object,System.Object,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)"/>
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.CaptureRequirementIfIsTrue(System.Boolean,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfIsTrue(System.Boolean,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)"/>
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.CaptureRequirementIfIsFalse(System.Boolean,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfIsFalse(System.Boolean,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)"/>
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.CaptureRequirementIfIsNull(System.Object,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfIsNull(System.Object,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)"/>
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.CaptureRequirementIfIsNotNull(System.Object,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfIsNotNull(System.Object,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)"/>
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.CaptureRequirementIfIsInstanceOfType(System.Object,System.Type,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfIsInstanceOfType(System.Object,System.Type,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)"/>
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.CaptureRequirementIfIsNotInstanceOfType(System.Object,System.Type,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfIsNotInstanceOfType(System.Object,System.Type,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)"/>
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.CaptureRequirementIfIsSuccess(System.Int32,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.ITestSite.CaptureRequirementIfIsSuccess(System.Int32,System.Int32,System.String,Microsoft.Protocols.TestTools.RequirementType)"/>
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.UnverifiedRequirement(System.Int32,System.String)">
            <summary>
            Implements <see cref="M:Microsoft.Protocols.TestTools.ITestSite.UnverifiedRequirement(System.Int32,System.String)"/>
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.GetReportToolParams(Microsoft.Protocols.TestTools.IConfigurationData)">
            <summary>
            Gets the reporting tool inputs
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.GetReportToolInstallDir">
            <summary>
            Gets the reporting tool install directory
            </summary>
            <returns>Returns the full path name of the reporting tool</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.GenerateAndDisplayTestReport(Microsoft.Protocols.TestTools.IConfigurationData)">
            <summary>
            Generates test report and auto display it.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.CaptureRequirement(System.String)">
            <summary>
            Logs requirement capture info
            </summary>
            <param name="message">Message which contains requirement info</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.GenerateRequirementId(System.Int32,System.String)">
            <summary>
            Generates requirement id in string format
            (meanwhile update the requirement dictionary)
            </summary>
            <param name="requirementId">Requirement id</param>
            <param name="description">Description</param>
            <returns>The requirement id in string format</returns>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.DefaultTestSite.disposed">
            <summary>
            Indicates if the DefaultTestSite has been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            </summary>
            <param name="disposing">
            If disposing equals false, the method is called by the 
            runtime from inside the finalizer and you should not reference 
            other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. 
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.DefaultTestSite.Finalize">
            <summary>
            This destructor will run only if the Dispose method 
            does not get called.
            It gives your base class the opportunity to finalize.
            Do not provide destructors in types derived from this class.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.DefaultTestSite.TestResultsStatistics">
            <summary>
            Implements <see cref="P:Microsoft.Protocols.TestTools.ITestSite.TestResultsStatistics"/>. 
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.DefaultTestSite.Properties">
            <summary>
            Implements <see cref="P:Microsoft.Protocols.TestTools.ITestSite.Properties"/>. 
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.DefaultTestSite.Config">
            <summary>
            Implements <see cref="P:Microsoft.Protocols.TestTools.ITestSite.Config"/>
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.DefaultTestSite.TestAssemblyName">
            <summary>
            Implements <see cref="P:Microsoft.Protocols.TestTools.ITestSite.TestAssemblyName"/>
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.DefaultTestSite.DefaultProtocolDocShortName">
            <summary>
            Implements <see cref="P:Microsoft.Protocols.TestTools.ITestSite.DefaultProtocolDocShortName"/>
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.DefaultTestSite.FeatureName">
            <summary>
            Implements <see cref="P:Microsoft.Protocols.TestTools.ITestSite.FeatureName"/>. 
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.DefaultTestSite.TestName">
            <summary>
            Implements <see cref="P:Microsoft.Protocols.TestTools.ITestSite.TestName"/>. 
            </summary>   
        </member>
        <member name="P:Microsoft.Protocols.TestTools.DefaultTestSite.TestSuiteName">
            <summary>
            Implements <see cref="P:Microsoft.Protocols.TestTools.ITestSite.TestSuiteName"/>. 
            </summary>   
        </member>
        <member name="P:Microsoft.Protocols.TestTools.DefaultTestSite.Log">
            <summary>
            Implements <see cref="P:Microsoft.Protocols.TestTools.ITestSite.Log"/>. 
            </summary>    
        </member>
        <member name="P:Microsoft.Protocols.TestTools.DefaultTestSite.Assert">
            <summary>
            Implements <see cref="P:Microsoft.Protocols.TestTools.ITestSite.Assert"/>. 
            </summary>           
        </member>
        <member name="P:Microsoft.Protocols.TestTools.DefaultTestSite.Assume">
            <summary>
            Implements <see cref="P:Microsoft.Protocols.TestTools.ITestSite.Assume"/>. 
            </summary>           
        </member>
        <member name="P:Microsoft.Protocols.TestTools.DefaultTestSite.Debug">
            <summary>
            Implements <see cref="P:Microsoft.Protocols.TestTools.ITestSite.Debug"/>. 
            </summary>           
        </member>
        <member name="E:Microsoft.Protocols.TestTools.DefaultTestSite.TestStarted">
            <summary>
            Implements <see cref="E:Microsoft.Protocols.TestTools.ITestSite.TestStarted"/>. 
            </summary>
        </member>
        <member name="E:Microsoft.Protocols.TestTools.DefaultTestSite.TestFinished">
            <summary>
            Implements <see cref="E:Microsoft.Protocols.TestTools.ITestSite.TestFinished"/>. 
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.DefaultTestSite.IsDisposed">
            <summary>
            Gets or sets the disposing status.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.DefaultTestSite.TestProperties">
            <summary>
            Implements <see cref="P:Microsoft.Protocols.TestTools.ITestSite.TestProperties"/>
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.DefaultTestSite.CustomAdapterProvider">
            <summary>
            A delegate which represents custom adapter type provider.
            </summary>
            <param name="type">The type of the custom adapter.</param>
            <returns>An instance of the custom adapter.</returns>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.ScriptAdapterProxy">
            <summary>
            A class which is used as proxy for constructing IAdapter of command script type
            and executing methods in IAdapter.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ScriptAdapterProxy.#ctor(System.String,System.Type)">
            <summary>
            Constructs a new command script adapter proxy.
            </summary>
            <param name="scriptDirectory">The path and file name of command script files.</param>
            <param name="typeToProxy">The type of adapter which the proxy works for.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ScriptAdapterProxy.Initialize(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            Can be overridden by extenders to do special initialization code.
            Call base to ensure the test site is initialized.
            </summary>
            <param name="mcall"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ScriptAdapterProxy.Reset(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            Can be overridden by extenders to do special processing of Reset.
            </summary>
            <param name="mcall"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ScriptAdapterProxy.InvokeCompat(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            Proxy method for substitution of executing Initialize/Reset methods in adapter interface.
            </summary>
            <param name="mcall">The IMethodCallMessage containing method invoking data.</param>
            <returns>Always void.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ScriptAdapterProxy.Invoke(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            Proxy method for substitution of executing methods in adapter interface.
            </summary>
            <param name="mcall">The IMethodCallMessage containing method invoking data.</param>
            <returns>The IMessage containing method return data.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ScriptAdapterProxy.NormalizeParameter(System.String)">
            <summary>
            Normalize a string value to a safe paramter to script
            </summary>
            <param name="value">The parameter to normalize</param>
            <returns>Normalized parameter</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.ScriptAdapterProxy.InvokeScript(System.String,System.String)">
            <summary>
            Invokde script by given file path and arguments.
            </summary>
            <param name="path">The file path to the cmd script.</param>
            <param name="arguments">The argument to be passed to the script.</param>
            <returns>The return value of script executation.</returns>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.NetworkEventSimulator">
            <summary>
            A class which simulating some kind of network event.
            (Should be used with MSProtocolTestSuiteNetworkEventSimulator filter)
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.NetworkEventSimulator.nesPort">
            <summary>
            Port of command packet
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.NetworkEventSimulator.udpClient">
            <summary>
            Uses UDP as transport
            </summary>
        </member>
        <member name="F:Microsoft.Protocols.TestTools.NetworkEventSimulator.broadcastHostname">
            <summary>
            Broadcasts the command packet
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.NetworkEventSimulator.GetIPAddress4FromMACAddress(System.Net.NetworkInformation.PhysicalAddress)">
            <summary>
            Search the local unicast IP according to the MAC
            </summary>
            <param name="macAddress">Local MAC address broadcasting the command packet</param>
            <returns>Unicast IP binding to this MAC</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.NetworkEventSimulator.BindLocalIP(System.Net.IPAddress)">
            <summary>
            Binds UDP client to a specific IP adderss
            </summary>
            <param name="ipAddress">IP address to bind</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.NetworkEventSimulator.SendCommand(Microsoft.Protocols.TestTools.NetworkEventSimulator.SimulatorCommand,System.Net.NetworkInformation.PhysicalAddress,System.Net.NetworkInformation.PhysicalAddress)">
            <summary>
            Sends command packet to control the MSProtocolTestSuiteNetworkEventSimulator filter
            </summary>
            <param name="sCommand">Flag to specify the command type</param>
            <param name="localMacAddress">The MAC address used to specify the local NIC used to send the command packet</param>
            <param name="remoteMacAddress">The MAC address specifying the target NIC</param>
            <returns>Flag to specify whether it has sent the command packet successfully</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.NetworkEventSimulator.LoseLocalConnection(System.Net.NetworkInformation.PhysicalAddress)">
            <summary>
            Loses all the connection binding to the local MAC. That means all packets sent and received by this NIC will be dropped.
            </summary>
            <param name="localMacAddress">The MAC address specifying the target NIC</param>
            <returns>Flag to specify whether it has sent the command packet successfully</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.NetworkEventSimulator.RestoreLocalConnection(System.Net.NetworkInformation.PhysicalAddress)">
            <summary>
            Restores all the connection binding to the local MAC.
            </summary>
            <param name="localMacAddress">The MAC address used to specify the target NIC</param>
            <returns>Flag to specify whether it has sent the command packet successfully</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.NetworkEventSimulator.LoseRemoteConnection(System.Net.NetworkInformation.PhysicalAddress,System.Net.NetworkInformation.PhysicalAddress)">
            <summary>
            Loses all the connection binding to a remote MAC. That means all packets sent and received by the NIC will be dropped.
            (You should know that which local NIC connected with the remote one)
            </summary>
            <param name="remoteMacAddress">The MAC address used to specify the target NIC</param>
            <param name="localMacAddress">The MAC address used to specify the local NIC used to send the command packet</param>
            <returns>Flag to specify whether it has sent the command packet successfully</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.NetworkEventSimulator.RestoreRemoteConnection(System.Net.NetworkInformation.PhysicalAddress,System.Net.NetworkInformation.PhysicalAddress)">
            <summary>
            Restores all the connection binding to a remote MAC.
            (You should know that which local NIC connected with the remote one)
            </summary>
            <param name="remoteMacAddress">The MAC address used to specify the target NIC</param>
            <param name="localMacAddress">The MAC address used to specify the local NIC used to send the command packet</param>
            <returns>Flag to specify whether it has sent the command packet successfully</returns>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.PtfOptionParser">
            <summary>
            A library class which provides additional convertor 
            to convert existing strings into values. 
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.#ctor">
            <summary>
            Disable the default constructor 
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="testSuiteName">The test suite name which is used to get test site.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.#ctor(Microsoft.Protocols.TestTools.ITestSite)">
            <summary>
            Constructor
            </summary>
            <param name="site">The test site which is used to log error message.</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.TryGetPropertyByName(System.String,System.String@)">
            <summary>
            Tries to get the value of property by specified property name.
            </summary>
            <param name="propertyName">Specified property name</param>
            <param name="value">Out parameter: return the value of property get from ptfconfig.</param>
            <returns>Returns true if the property value is successfully retrieved; otherwise, returns false.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.GetString(System.String,System.String)">
            <summary>
            Gets the String value from configured property.
            </summary>
            <param name="propertyName">The property name to be converted</param>
            <param name="dflt">The default value which will be returned when it fails to get value.</param>
            <returns>Returns parsed value if it is got successfully; otherwise, returns the default value.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.TryGetString(System.String,System.String@)">
            <summary>
            Tries to parse the string value from the configured string.
            </summary>
            <param name="propertyName">Property name</param>
            <param name="value">Out parameter, to return the parsed value.</param>
            <returns>true if it was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.GetInt32(System.String,System.Int32)">
            <summary>
            Gets the Int32 value from the property configured.
            </summary>
            <param name="propertyName">The property name to be converted</param>
            <param name="dflt">The default value which will be returned when it fails to get value.</param>
            <returns>Returns parsed value if it is got successfully; otherwise, returns the default value.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.TryGetInt32(System.String,System.Int32@)">
            <summary>
            Tries to parse int32 value from the configured string.
            </summary>
            <param name="propertyName">Property name</param>
            <param name="value">Out parameter, to return the parsed value.</param>
            <returns>true if it was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.GetSByte(System.String,System.SByte)">
            <summary>
            Gets the SByte value from the property configured.
            </summary>
            <param name="propertyName">The property name to be converted</param>
            <param name="dflt">The default value which will be returned when it fails to get value.</param>
            <returns>Returns parsed value if it is got successfully; otherwise, returns the default value.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.TryGetSByte(System.String,System.SByte@)">
            <summary>
            Tries to parse SByte value from the configured string.
            </summary>
            <param name="propertyName">Property name</param>
            <param name="value">Out parameter, to return the parsed value.</param>
            <returns>true if it was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.GetInt16(System.String,System.Int16)">
            <summary>
            Gets the Int16 value from the property configured.
            </summary>
            <param name="propertyName">The property name to be converted</param>
            <param name="dflt">The default value which will be returned when it fails to get value.</param>
            <returns>Returns parsed value if it is got successfully; otherwise, returns the default value.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.TryGetInt16(System.String,System.Int16@)">
            <summary>
            Tries to parse int16 value from the configured string.
            </summary>
            <param name="propertyName">Property name</param>
            <param name="value">Out parameter, to return the parsed value.</param>
            <returns>true if it was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.GetInt64(System.String,System.Int64)">
            <summary>
            Gets the Int64 value from the property configured.
            </summary>
            <param name="propertyName">The property name to be converted</param>
            <param name="dflt">The default value which will be returned when it fails to get value.</param>
            <returns>Returns parsed value if it is got successfully; otherwise, returns the default value.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.TryGetInt64(System.String,System.Int64@)">
            <summary>
            Tries to parse int64 value from the configured string.
            </summary>
            <param name="propertyName">Property name</param>
            <param name="value">Out parameter, to return the parsed value.</param>
            <returns>true if it was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.GetByte(System.String,System.Byte)">
            <summary>
            Gets the Byte value from the property configured.
            </summary>
            <param name="propertyName">The property name to be converted</param>
            <param name="dflt">The default value which will be returned when it fails to get value.</param>
            <returns>Returns parsed value if it is got successfully; otherwise, returns the default value.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.TryGetByte(System.String,System.Byte@)">
            <summary>
            Tries to parse Byte value from the configured string.
            </summary>
            <param name="propertyName">Property name</param>
            <param name="value">Out parameter, to return the parsed value.</param>
            <returns>true if it was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.GetUInt16(System.String,System.UInt16)">
            <summary>
            Gets the UInt16 value from the property configured.
            </summary>
            <param name="propertyName">The property name to be converted</param>
            <param name="dflt">The default value which will be returned when it fails to get value.</param>
            <returns>Returns parsed value if it is got successfully; otherwise, returns the default value.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.TryGetUInt16(System.String,System.UInt16@)">
            <summary>
            Tries to parse Byte value from the configured string.
            </summary>
            <param name="propertyName">Property name</param>
            <param name="value">Out parameter, to return the parsed value.</param>
            <returns>true if it was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.GetUInt32(System.String,System.UInt32)">
            <summary>
            Gets the UInt32 value from the property configured.
            </summary>
            <param name="propertyName">The property name to be converted</param>
            <param name="dflt">The default value which will be returned when it fails to get value.</param>
            <returns>Returns parsed value if it is got successfully; otherwise, returns the default value.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.TryGetUInt32(System.String,System.UInt32@)">
            <summary>
            Tries to parse UInt32 value from the configured string.
            </summary>
            <param name="propertyName">Property name</param>
            <param name="value">Out parameter, to return the parsed value.</param>
            <returns>true if it was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.GetUInt64(System.String,System.UInt64)">
            <summary>
            Gets the UInt64 value from the property configured.
            </summary>
            <param name="propertyName">The property name to be converted</param>
            <param name="dflt">The default value which will be returned when it fails to get value.</param>
            <returns>Returns parsed value if it is got successfully; otherwise, returns the default value.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.TryGetUInt64(System.String,System.UInt64@)">
            <summary>
            Tries to parse UInt64 value from the configured string.
            </summary>
            <param name="propertyName">Property name</param>
            <param name="value">Out parameter, to return the parsed value.</param>
            <returns>true if it was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.GetSingle(System.String,System.Single)">
            <summary>
            Gets the Single value from the property configured.
            </summary>
            <param name="propertyName">The property name to be converted</param>
            <param name="dflt">The default value which will be returned when it fails to get value.</param>
            <returns>Returns parsed value if it is got successfully; otherwise, returns the default value.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.TryGetSingle(System.String,System.Single@)">
            <summary>
            Tries to parse float value from the configured string.
            </summary>
            <param name="propertyName">Property name</param>
            <param name="value">Out parameter, to return the parsed value.</param>
            <returns>true if it was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.GetDouble(System.String,System.Double)">
            <summary>
            Gets the Double value from the property configured.
            </summary>
            <param name="propertyName">The property name to be converted</param>
            <param name="dflt">The default value which will be returned when it fails to get value.</param>
            <returns>Returns parsed value if it is got successfully; otherwise, returns the default value.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.TryGetDouble(System.String,System.Double@)">
            <summary>
            Tries to parse Double value from the configured string.
            </summary>
            <param name="propertyName">Property name</param>
            <param name="value">Out parameter, to return the parsed value.</param>
            <returns>true if it was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.GetDecimal(System.String,System.Decimal)">
            <summary>
            Gets the Decimal value from the property configured.
            </summary>
            <param name="propertyName">The property name to be converted</param>
            <param name="dflt">The default value which will be returned when it fails to get value.</param>
            <returns>Returns parsed value if it is got successfully; otherwise, returns the default value.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.TryGetDecimal(System.String,System.Decimal@)">
            <summary>
            Tries to parse Decimal value from the configured string.
            </summary>
            <param name="propertyName">Property name</param>
            <param name="value">Out parameter, to return the parsed value.</param>
            <returns>true if it was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.GetBoolean(System.String,System.Boolean)">
            <summary>
            Gets the Boolean value from the property configured.
            </summary>
            <param name="propertyName">The property name to be converted</param>
            <param name="dflt">The default value which will be returned when it fails to get value.</param>
            <returns>Returns parsed value if it is got successfully; otherwise, returns the default value.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.TryGetBoolean(System.String,System.Boolean@)">
            <summary>
            Tries to parse Boolean value from the configured string.
            </summary>
            <param name="propertyName">Property name</param>
            <param name="value">Out parameter, to return the parsed value.</param>
            <returns>true if it was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.GetDateTime(System.String,System.DateTime)">
            <summary>
            Gets the DateTime value from the property configured.
            </summary>
            <param name="propertyName">The property name to be converted</param>
            <param name="dflt">The default value which will be returned when it fails to get value.</param>
            <returns>Returns parsed value if it is got successfully; otherwise, returns the default value.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.TryGetDateTime(System.String,System.DateTime@)">
            <summary>
            Tries to parse DateTime value from the configured string.
            </summary>
            <param name="propertyName">Property name</param>
            <param name="value">Out parameter, to return the parsed value.</param>
            <returns>true if it was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.GetTimeSpan(System.String,System.TimeSpan)">
            <summary>
            Gets the TimeSpan value from the property configured.
            </summary>
            <param name="propertyName">The property name to be converted</param>
            <param name="dflt">The default value which will be returned when it fails to get value.</param>
            <returns>Returns parsed value if it is got successfully; otherwise, returns the default value.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.TryGetTimeSpan(System.String,System.TimeSpan@)">
            <summary>
            Tries to parse TimeSpan value from the configured string.
            </summary>
            <param name="propertyName">Property name</param>
            <param name="value">Out parameter, to return the parsed value.</param>
            <returns>true if it was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.GetAddressFamily(System.String,System.Net.Sockets.AddressFamily)">
            <summary>
            Gets the AddressFamily value from the property configured.
            </summary>
            <param name="propertyName">The property name to be converted</param>
            <param name="dflt">The default value which will be returned when it fails to get value.</param>
            <returns>Returns parsed value if it is got successfully; otherwise, returns the default value.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.TryGetAddressFamily(System.String,System.Net.Sockets.AddressFamily@)">
            <summary>
            Tries to parse AddressFamily value from the configured string.
            </summary>
            <param name="propertyName">Property name</param>
            <param name="value">Out parameter, to return the parsed value.</param>
            <returns>true if it was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.GetIPAddress(System.String,System.Net.IPAddress)">
            <summary>
            Gets the IPAddress value from the property configured.
            </summary>
            <param name="propertyName">The property name to be converted</param>
            <param name="dflt">The default value which will be returned when it fails to get value.</param>
            <returns>Returns parsed value if it is got successfully; otherwise, returns the default value.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.TryGetIPAddress(System.String,System.Net.IPAddress@)">
            <summary>
            Tries to parse IPAddress value from the configured string.
            </summary>
            <param name="propertyName">Property name</param>
            <param name="value">Out parameter, to return the parsed value.</param>
            <returns>true if it was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.GetChar(System.String,System.Char)">
            <summary>
            Gets the Char value from the property configured.
            </summary>
            <param name="propertyName">The property name to be converted</param>
            <param name="dflt">The default value which will be returned when it fails to get value.</param>
            <returns>Returns parsed value if it is got successfully; otherwise, returns the default value.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.PtfOptionParser.TryGetChar(System.String,System.Char@)">
            <summary>
            Tries to parse Char value from the configured string.
            </summary>
            <param name="propertyName">Property name</param>
            <param name="value">Out parameter, to return the parsed value.</param>
            <returns>true if it was converted successfully; otherwise, false.</returns>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.ProtocolTestsManagerFactory">
            <summary>
            IProtocolTestsManager factory.
            </summary>
        </member>
        <member name="P:Microsoft.Protocols.TestTools.ProtocolTestsManagerFactory.TestsManager">
            <summary>
            Gets the IProtocolTestsManager instances.
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.RequirementId">
            <summary>
            A class which creates the unified message for captured requirements.
            This class can be used from modeling code as well as from test suite code. 
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.RequirementId.Make(System.String,System.Int32,System.String)">
            <summary>
            Makes a requirement entry, inserts into the requirement table if necessary,
            and returns the requirement ID.
            </summary>
            <remarks>
            The decription of requirement string must be unique. If more than descriptions are specified for
            a requirement, an InvalidOperationException will be raised.
            </remarks>
            <param name="docShortName">The requirement specification document short name.</param>
            <param name="number">The requirement number.</param>
            <param name="description">The requirement description string.</param>
            <returns>The requirement id. Format &lt;docShortName&gt;_R&lt;number&gt;.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.RequirementId.ClearRequirementTable">
            <summary>
            Empties the requirement table.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.RequirementId.GetDescription(System.String,System.Int32)">
            <summary>
            Gets the corresponding description by docShortName and number.
            </summary>
            <param name="docShortName">Document short name, eg. MS-KILE</param>
            <param name="number">Number in doc, eg. 24</param>
            <returns>The description string, null if not found.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.RequirementId.GetDescription(System.String)">
            <summary>
            Gets the corresponding description by Requirement Id.
            </summary>
            <param name="reqId">Requirement id, eg. MS-KILE_24</param>
            <returns>The description string, null if not found.</returns>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.TestSiteProvider">
            <summary>
            FOR INTERNAL USE ONLY.
            A static class which manages the test site used throughout a series of test suite executions.
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.TestSiteProvider.Initialize(Microsoft.Protocols.TestTools.IConfigurationData,Microsoft.Protocols.TestTools.IProtocolTestContext,System.String,System.String)">
            <summary>
            Initializes the current test site, based on test test context and test suite name.
            If a current test site exists which does have same test suite name,
            it will be reused, otherwise a new one will be created, otherwise the current one
            will be reused.
            </summary>
            <param name="config">Configuration data from ptfconfig</param>
            <param name="context"></param>
            <param name="testSuiteName"></param>
            <param name="testAssemblyName">Test assembly name</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.TestSiteProvider.Initialize(Microsoft.Protocols.TestTools.IConfigurationData,System.String,System.String,System.String)">
            <summary>
            Initializes the current test site, using the given config search path and test suite name.
            If a current test site exists which does have same test suite name,
            it will be reused, otherwise a new one will be created, otherwise the current one
            will be reused.
            </summary>
            <param name="config">Configuration data from ptfconfig</param>
            <param name="configPath"></param>
            <param name="testSuiteName"></param>
            <param name="testAssemblyName">Test assembly name</param>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.TestSiteProvider.Cleanup">
            <summary>
            Cleans up the current test site. This method closes the log and disposes the test site.
            </summary>
        </member>
        <member name="T:Microsoft.Protocols.TestTools.TestToolHelpers">
            <summary>
            Provides a series of helper methods in test tool
            </summary>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.TestToolHelpers.ResolveTypeFromAssemblies(System.String,System.String)">
            <summary>
            Resolves the Type with the specified name, performing a case-sensitive search 
            in the assemblies in the current AppDomain or specified assembly.
            </summary>
            <param name="nameOfType">The name of the assembly-qualified name of the Type. </param>
            <param name="assemblyLoadDir">Specified directory where to search the assembly.</param>
            <returns>The Type with the specified name, if found.</returns>
            <remarks>This method first searches the type in assemblies loaded in current AppDomain, then, if fails, 
            searches into the assembly specified in the assembly qualified type name.</remarks>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.TestToolHelpers.ResolveTypeByLoadAssembly(System.String,System.String)">
            <summary>
            Resolves the type by search the assembly from specified directory.
            </summary>
            <param name="nameOfType">Assembly qualified name of the type.</param>
            <param name="assemblyLoadDir">Specified directory where to search the assembly.</param>
            <returns>The Type with the specified name, if found.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.TestToolHelpers.CreateInstanceFromTypeName(System.String,System.Object[])">
            <summary>
            Creates an instance of the specified type using the constructor that best matches the specified parameters.
            </summary>
            <param name="nameOfType">The type name of object to create. </param>
            <param name="args">An array of arguments that matches in number, order, and type the parameters 
            of the constructor to invoke.</param>
            <returns>A reference to the newly created object. </returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.TestToolHelpers.CreateInstanceFromTypeName(System.String)">
            <summary>
            Creates an instance of the specified type using the default constructor.
            </summary>
            <param name="nameOfType">The type name of object to create. </param>
            <returns>A reference to the newly created object. </returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.TestToolHelpers.GetAllDerivedTypes(System.Type)">
            <summary>
            Get all types derived from the base type.
            </summary>
            <param name="mostDerivedType">The most derived type</param>
            <returns>Returns a set of derived types</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.TestToolHelpers.GetMethodsByAttribute(System.Type,System.Type,System.Boolean)">
            <summary>
            Gets all methods in the decleared type which are marked with the specified attribute.
            </summary>
            <param name="attributeType">Attribute type which is used for finding methods.</param>
            <param name="declearedType">The type where methods declared.</param>
            <param name="inherit">True indicates that it needs to find methods also in base class.</param>
            <returns>Returns a collection of methods which are marked with the specified attribute.</returns>
        </member>
        <member name="M:Microsoft.Protocols.TestTools.TestToolHelpers.XmlBoolToBool(System.String)">
            <summary>
            Convert XML Boolean to .Net Boolean
            </summary>
            <param name="value">The boolean value in xml will be true, false, 1, 0</param>
            <returns>true or false</returns>
        </member>
    </members>
</doc>
